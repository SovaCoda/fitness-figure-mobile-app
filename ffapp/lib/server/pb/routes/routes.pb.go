// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.2
// source: routes.proto

package routes

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LeaderboardType int32

const (
	LeaderboardType_GLOBAL       LeaderboardType = 0
	LeaderboardType_FRIENDS_ONLY LeaderboardType = 1
)

// Enum value maps for LeaderboardType.
var (
	LeaderboardType_name = map[int32]string{
		0: "GLOBAL",
		1: "FRIENDS_ONLY",
	}
	LeaderboardType_value = map[string]int32{
		"GLOBAL":       0,
		"FRIENDS_ONLY": 1,
	}
)

func (x LeaderboardType) Enum() *LeaderboardType {
	p := new(LeaderboardType)
	*p = x
	return p
}

func (x LeaderboardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeaderboardType) Descriptor() protoreflect.EnumDescriptor {
	return file_routes_proto_enumTypes[0].Descriptor()
}

func (LeaderboardType) Type() protoreflect.EnumType {
	return &file_routes_proto_enumTypes[0]
}

func (x LeaderboardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeaderboardType.Descriptor instead.
func (LeaderboardType) EnumDescriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{0}
}

type LeaderboardTimeFrame int32

const (
	LeaderboardTimeFrame_WEEKLY   LeaderboardTimeFrame = 0
	LeaderboardTimeFrame_ALL_TIME LeaderboardTimeFrame = 1
)

// Enum value maps for LeaderboardTimeFrame.
var (
	LeaderboardTimeFrame_name = map[int32]string{
		0: "WEEKLY",
		1: "ALL_TIME",
	}
	LeaderboardTimeFrame_value = map[string]int32{
		"WEEKLY":   0,
		"ALL_TIME": 1,
	}
)

func (x LeaderboardTimeFrame) Enum() *LeaderboardTimeFrame {
	p := new(LeaderboardTimeFrame)
	*p = x
	return p
}

func (x LeaderboardTimeFrame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeaderboardTimeFrame) Descriptor() protoreflect.EnumDescriptor {
	return file_routes_proto_enumTypes[1].Descriptor()
}

func (LeaderboardTimeFrame) Type() protoreflect.EnumType {
	return &file_routes_proto_enumTypes[1]
}

func (x LeaderboardTimeFrame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeaderboardTimeFrame.Descriptor instead.
func (LeaderboardTimeFrame) EnumDescriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{1}
}

type GenericStringResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *GenericStringResponse) Reset() {
	*x = GenericStringResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericStringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericStringResponse) ProtoMessage() {}

func (x *GenericStringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericStringResponse.ProtoReflect.Descriptor instead.
func (*GenericStringResponse) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{0}
}

func (x *GenericStringResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Workout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email      string  `protobuf:"bytes,1,opt,name=Email,proto3" json:"Email,omitempty"`
	StartDate  string  `protobuf:"bytes,2,opt,name=Start_date,json=StartDate,proto3" json:"Start_date,omitempty"`
	Elapsed    int64   `protobuf:"varint,3,opt,name=Elapsed,proto3" json:"Elapsed,omitempty"`
	Evo_Add    int64   `protobuf:"varint,4,opt,name=Evo_Add,json=EvoAdd,proto3" json:"Evo_Add,omitempty"`
	End_Date   string  `protobuf:"bytes,5,opt,name=End_Date,json=EndDate,proto3" json:"End_Date,omitempty"`
	Charge_Add int64   `protobuf:"varint,6,opt,name=Charge_Add,json=ChargeAdd,proto3" json:"Charge_Add,omitempty"`
	Countable  int32   `protobuf:"varint,7,opt,name=Countable,proto3" json:"Countable,omitempty"`
	Robot_Name string  `protobuf:"bytes,8,opt,name=Robot_Name,json=RobotName,proto3" json:"Robot_Name,omitempty"`
	Investment float64 `protobuf:"fixed64,9,opt,name=investment,proto3" json:"investment,omitempty"`
}

func (x *Workout) Reset() {
	*x = Workout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workout) ProtoMessage() {}

func (x *Workout) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workout.ProtoReflect.Descriptor instead.
func (*Workout) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{1}
}

func (x *Workout) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Workout) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *Workout) GetElapsed() int64 {
	if x != nil {
		return x.Elapsed
	}
	return 0
}

func (x *Workout) GetEvo_Add() int64 {
	if x != nil {
		return x.Evo_Add
	}
	return 0
}

func (x *Workout) GetEnd_Date() string {
	if x != nil {
		return x.End_Date
	}
	return ""
}

func (x *Workout) GetCharge_Add() int64 {
	if x != nil {
		return x.Charge_Add
	}
	return 0
}

func (x *Workout) GetCountable() int32 {
	if x != nil {
		return x.Countable
	}
	return 0
}

func (x *Workout) GetRobot_Name() string {
	if x != nil {
		return x.Robot_Name
	}
	return ""
}

func (x *Workout) GetInvestment() float64 {
	if x != nil {
		return x.Investment
	}
	return 0
}

type MultiWorkout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workouts []*Workout `protobuf:"bytes,1,rep,name=workouts,proto3" json:"workouts,omitempty"`
}

func (x *MultiWorkout) Reset() {
	*x = MultiWorkout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiWorkout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiWorkout) ProtoMessage() {}

func (x *MultiWorkout) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiWorkout.ProtoReflect.Descriptor instead.
func (*MultiWorkout) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{2}
}

func (x *MultiWorkout) GetWorkouts() []*Workout {
	if x != nil {
		return x.Workouts
	}
	return nil
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email             string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	CurFigure         string `protobuf:"bytes,2,opt,name=cur_figure,json=curFigure,proto3" json:"cur_figure,omitempty"`
	Name              string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Currency          int64  `protobuf:"varint,4,opt,name=currency,proto3" json:"currency,omitempty"`
	WeekComplete      int64  `protobuf:"varint,5,opt,name=week_complete,json=weekComplete,proto3" json:"week_complete,omitempty"`
	WeekGoal          int64  `protobuf:"varint,6,opt,name=week_goal,json=weekGoal,proto3" json:"week_goal,omitempty"`
	CurWorkout        string `protobuf:"bytes,7,opt,name=cur_workout,json=curWorkout,proto3" json:"cur_workout,omitempty"`
	WorkoutMinTime    int64  `protobuf:"varint,8,opt,name=workout_min_time,json=workoutMinTime,proto3" json:"workout_min_time,omitempty"`
	LastLogin         string `protobuf:"bytes,9,opt,name=last_login,json=lastLogin,proto3" json:"last_login,omitempty"`
	Streak            int64  `protobuf:"varint,10,opt,name=streak,proto3" json:"streak,omitempty"`
	Premium           int64  `protobuf:"varint,11,opt,name=premium,proto3" json:"premium,omitempty"`
	ReadyForWeekReset string `protobuf:"bytes,12,opt,name=ready_for_week_reset,json=readyForWeekReset,proto3" json:"ready_for_week_reset,omitempty"`
	IsInGracePeriod   string `protobuf:"bytes,13,opt,name=is_in_grace_period,json=isInGracePeriod,proto3" json:"is_in_grace_period,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{3}
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetCurFigure() string {
	if x != nil {
		return x.CurFigure
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetCurrency() int64 {
	if x != nil {
		return x.Currency
	}
	return 0
}

func (x *User) GetWeekComplete() int64 {
	if x != nil {
		return x.WeekComplete
	}
	return 0
}

func (x *User) GetWeekGoal() int64 {
	if x != nil {
		return x.WeekGoal
	}
	return 0
}

func (x *User) GetCurWorkout() string {
	if x != nil {
		return x.CurWorkout
	}
	return ""
}

func (x *User) GetWorkoutMinTime() int64 {
	if x != nil {
		return x.WorkoutMinTime
	}
	return 0
}

func (x *User) GetLastLogin() string {
	if x != nil {
		return x.LastLogin
	}
	return ""
}

func (x *User) GetStreak() int64 {
	if x != nil {
		return x.Streak
	}
	return 0
}

func (x *User) GetPremium() int64 {
	if x != nil {
		return x.Premium
	}
	return 0
}

func (x *User) GetReadyForWeekReset() string {
	if x != nil {
		return x.ReadyForWeekReset
	}
	return ""
}

func (x *User) GetIsInGracePeriod() string {
	if x != nil {
		return x.IsInGracePeriod
	}
	return ""
}

type DailySnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User_Email            string `protobuf:"bytes,1,opt,name=User_Email,json=UserEmail,proto3" json:"User_Email,omitempty"`
	Date                  string `protobuf:"bytes,2,opt,name=Date,proto3" json:"Date,omitempty"`
	Figure_Name           string `protobuf:"bytes,3,opt,name=Figure_Name,json=FigureName,proto3" json:"Figure_Name,omitempty"`
	Ev_Points             int32  `protobuf:"varint,4,opt,name=Ev_Points,json=EvPoints,proto3" json:"Ev_Points,omitempty"`
	Ev_Level              int32  `protobuf:"varint,5,opt,name=Ev_Level,json=EvLevel,proto3" json:"Ev_Level,omitempty"`
	Charge                int32  `protobuf:"varint,6,opt,name=Charge,proto3" json:"Charge,omitempty"`
	User_Streak           int32  `protobuf:"varint,7,opt,name=User_Streak,json=UserStreak,proto3" json:"User_Streak,omitempty"`
	User_Week_Complete    int32  `protobuf:"varint,8,opt,name=User_Week_Complete,json=UserWeekComplete,proto3" json:"User_Week_Complete,omitempty"`
	User_Week_Goal        int32  `protobuf:"varint,9,opt,name=User_Week_Goal,json=UserWeekGoal,proto3" json:"User_Week_Goal,omitempty"`
	User_Workout_Min_Time int32  `protobuf:"varint,10,opt,name=User_Workout_Min_Time,json=UserWorkoutMinTime,proto3" json:"User_Workout_Min_Time,omitempty"`
	User_Currency         int32  `protobuf:"varint,11,opt,name=User_Currency,json=UserCurrency,proto3" json:"User_Currency,omitempty"`
}

func (x *DailySnapshot) Reset() {
	*x = DailySnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailySnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailySnapshot) ProtoMessage() {}

func (x *DailySnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailySnapshot.ProtoReflect.Descriptor instead.
func (*DailySnapshot) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{4}
}

func (x *DailySnapshot) GetUser_Email() string {
	if x != nil {
		return x.User_Email
	}
	return ""
}

func (x *DailySnapshot) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DailySnapshot) GetFigure_Name() string {
	if x != nil {
		return x.Figure_Name
	}
	return ""
}

func (x *DailySnapshot) GetEv_Points() int32 {
	if x != nil {
		return x.Ev_Points
	}
	return 0
}

func (x *DailySnapshot) GetEv_Level() int32 {
	if x != nil {
		return x.Ev_Level
	}
	return 0
}

func (x *DailySnapshot) GetCharge() int32 {
	if x != nil {
		return x.Charge
	}
	return 0
}

func (x *DailySnapshot) GetUser_Streak() int32 {
	if x != nil {
		return x.User_Streak
	}
	return 0
}

func (x *DailySnapshot) GetUser_Week_Complete() int32 {
	if x != nil {
		return x.User_Week_Complete
	}
	return 0
}

func (x *DailySnapshot) GetUser_Week_Goal() int32 {
	if x != nil {
		return x.User_Week_Goal
	}
	return 0
}

func (x *DailySnapshot) GetUser_Workout_Min_Time() int32 {
	if x != nil {
		return x.User_Workout_Min_Time
	}
	return 0
}

func (x *DailySnapshot) GetUser_Currency() int32 {
	if x != nil {
		return x.User_Currency
	}
	return 0
}

type MultiDailySnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailySnapshots []*DailySnapshot `protobuf:"bytes,1,rep,name=dailySnapshots,proto3" json:"dailySnapshots,omitempty"`
}

func (x *MultiDailySnapshot) Reset() {
	*x = MultiDailySnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiDailySnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiDailySnapshot) ProtoMessage() {}

func (x *MultiDailySnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiDailySnapshot.ProtoReflect.Descriptor instead.
func (*MultiDailySnapshot) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{5}
}

func (x *MultiDailySnapshot) GetDailySnapshots() []*DailySnapshot {
	if x != nil {
		return x.DailySnapshots
	}
	return nil
}

type MultiUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
}

func (x *MultiUser) Reset() {
	*x = MultiUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiUser) ProtoMessage() {}

func (x *MultiUser) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiUser.ProtoReflect.Descriptor instead.
func (*MultiUser) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{6}
}

func (x *MultiUser) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type FigureInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figure_Id   string `protobuf:"bytes,1,opt,name=Figure_Id,json=FigureId,proto3" json:"Figure_Id,omitempty"`
	Figure_Name string `protobuf:"bytes,2,opt,name=Figure_Name,json=FigureName,proto3" json:"Figure_Name,omitempty"`
	User_Email  string `protobuf:"bytes,3,opt,name=User_Email,json=UserEmail,proto3" json:"User_Email,omitempty"`
	Cur_Skin    string `protobuf:"bytes,4,opt,name=Cur_Skin,json=CurSkin,proto3" json:"Cur_Skin,omitempty"`
	Ev_Points   int32  `protobuf:"varint,5,opt,name=Ev_Points,json=EvPoints,proto3" json:"Ev_Points,omitempty"`
	Charge      int32  `protobuf:"varint,6,opt,name=Charge,proto3" json:"Charge,omitempty"`
	Mood        int32  `protobuf:"varint,7,opt,name=Mood,proto3" json:"Mood,omitempty"`
	Last_Reset  string `protobuf:"bytes,8,opt,name=Last_Reset,json=LastReset,proto3" json:"Last_Reset,omitempty"`
	Ev_Level    int32  `protobuf:"varint,9,opt,name=Ev_Level,json=EvLevel,proto3" json:"Ev_Level,omitempty"`
}

func (x *FigureInstance) Reset() {
	*x = FigureInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FigureInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FigureInstance) ProtoMessage() {}

func (x *FigureInstance) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FigureInstance.ProtoReflect.Descriptor instead.
func (*FigureInstance) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{7}
}

func (x *FigureInstance) GetFigure_Id() string {
	if x != nil {
		return x.Figure_Id
	}
	return ""
}

func (x *FigureInstance) GetFigure_Name() string {
	if x != nil {
		return x.Figure_Name
	}
	return ""
}

func (x *FigureInstance) GetUser_Email() string {
	if x != nil {
		return x.User_Email
	}
	return ""
}

func (x *FigureInstance) GetCur_Skin() string {
	if x != nil {
		return x.Cur_Skin
	}
	return ""
}

func (x *FigureInstance) GetEv_Points() int32 {
	if x != nil {
		return x.Ev_Points
	}
	return 0
}

func (x *FigureInstance) GetCharge() int32 {
	if x != nil {
		return x.Charge
	}
	return 0
}

func (x *FigureInstance) GetMood() int32 {
	if x != nil {
		return x.Mood
	}
	return 0
}

func (x *FigureInstance) GetLast_Reset() string {
	if x != nil {
		return x.Last_Reset
	}
	return ""
}

func (x *FigureInstance) GetEv_Level() int32 {
	if x != nil {
		return x.Ev_Level
	}
	return 0
}

type MultiFigureInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FigureInstances []*FigureInstance `protobuf:"bytes,1,rep,name=figureInstances,proto3" json:"figureInstances,omitempty"`
}

func (x *MultiFigureInstance) Reset() {
	*x = MultiFigureInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiFigureInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiFigureInstance) ProtoMessage() {}

func (x *MultiFigureInstance) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiFigureInstance.ProtoReflect.Descriptor instead.
func (*MultiFigureInstance) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{8}
}

func (x *MultiFigureInstance) GetFigureInstances() []*FigureInstance {
	if x != nil {
		return x.FigureInstances
	}
	return nil
}

type Figure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figure_Name        string `protobuf:"bytes,1,opt,name=Figure_Name,json=FigureName,proto3" json:"Figure_Name,omitempty"`
	Base_Ev_Gain       int32  `protobuf:"varint,2,opt,name=Base_Ev_Gain,json=BaseEvGain,proto3" json:"Base_Ev_Gain,omitempty"`
	Base_Currency_Gain int32  `protobuf:"varint,3,opt,name=Base_Currency_Gain,json=BaseCurrencyGain,proto3" json:"Base_Currency_Gain,omitempty"`
	Price              int32  `protobuf:"varint,4,opt,name=Price,proto3" json:"Price,omitempty"`
	Stage1_Ev_Cutoff   int32  `protobuf:"varint,5,opt,name=Stage1_Ev_Cutoff,json=Stage1EvCutoff,proto3" json:"Stage1_Ev_Cutoff,omitempty"`
	Stage2_Ev_Cutoff   int32  `protobuf:"varint,6,opt,name=Stage2_Ev_Cutoff,json=Stage2EvCutoff,proto3" json:"Stage2_Ev_Cutoff,omitempty"`
	Stage3_Ev_Cutoff   int32  `protobuf:"varint,7,opt,name=Stage3_Ev_Cutoff,json=Stage3EvCutoff,proto3" json:"Stage3_Ev_Cutoff,omitempty"`
	Stage4_Ev_Cutoff   int32  `protobuf:"varint,8,opt,name=Stage4_Ev_Cutoff,json=Stage4EvCutoff,proto3" json:"Stage4_Ev_Cutoff,omitempty"`
	Stage5_Ev_Cutoff   int32  `protobuf:"varint,9,opt,name=Stage5_Ev_Cutoff,json=Stage5EvCutoff,proto3" json:"Stage5_Ev_Cutoff,omitempty"`
	Stage6_Ev_Cutoff   int32  `protobuf:"varint,10,opt,name=Stage6_Ev_Cutoff,json=Stage6EvCutoff,proto3" json:"Stage6_Ev_Cutoff,omitempty"`
	Stage7_Ev_Cutoff   int32  `protobuf:"varint,11,opt,name=Stage7_Ev_Cutoff,json=Stage7EvCutoff,proto3" json:"Stage7_Ev_Cutoff,omitempty"`
	Stage8_Ev_Cutoff   int32  `protobuf:"varint,12,opt,name=Stage8_Ev_Cutoff,json=Stage8EvCutoff,proto3" json:"Stage8_Ev_Cutoff,omitempty"`
	Stage9_Ev_Cutoff   int32  `protobuf:"varint,13,opt,name=Stage9_Ev_Cutoff,json=Stage9EvCutoff,proto3" json:"Stage9_Ev_Cutoff,omitempty"`
	Stage10_Ev_Cutoff  int32  `protobuf:"varint,14,opt,name=Stage10_Ev_Cutoff,json=Stage10EvCutoff,proto3" json:"Stage10_Ev_Cutoff,omitempty"`
}

func (x *Figure) Reset() {
	*x = Figure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Figure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Figure) ProtoMessage() {}

func (x *Figure) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Figure.ProtoReflect.Descriptor instead.
func (*Figure) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{9}
}

func (x *Figure) GetFigure_Name() string {
	if x != nil {
		return x.Figure_Name
	}
	return ""
}

func (x *Figure) GetBase_Ev_Gain() int32 {
	if x != nil {
		return x.Base_Ev_Gain
	}
	return 0
}

func (x *Figure) GetBase_Currency_Gain() int32 {
	if x != nil {
		return x.Base_Currency_Gain
	}
	return 0
}

func (x *Figure) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Figure) GetStage1_Ev_Cutoff() int32 {
	if x != nil {
		return x.Stage1_Ev_Cutoff
	}
	return 0
}

func (x *Figure) GetStage2_Ev_Cutoff() int32 {
	if x != nil {
		return x.Stage2_Ev_Cutoff
	}
	return 0
}

func (x *Figure) GetStage3_Ev_Cutoff() int32 {
	if x != nil {
		return x.Stage3_Ev_Cutoff
	}
	return 0
}

func (x *Figure) GetStage4_Ev_Cutoff() int32 {
	if x != nil {
		return x.Stage4_Ev_Cutoff
	}
	return 0
}

func (x *Figure) GetStage5_Ev_Cutoff() int32 {
	if x != nil {
		return x.Stage5_Ev_Cutoff
	}
	return 0
}

func (x *Figure) GetStage6_Ev_Cutoff() int32 {
	if x != nil {
		return x.Stage6_Ev_Cutoff
	}
	return 0
}

func (x *Figure) GetStage7_Ev_Cutoff() int32 {
	if x != nil {
		return x.Stage7_Ev_Cutoff
	}
	return 0
}

func (x *Figure) GetStage8_Ev_Cutoff() int32 {
	if x != nil {
		return x.Stage8_Ev_Cutoff
	}
	return 0
}

func (x *Figure) GetStage9_Ev_Cutoff() int32 {
	if x != nil {
		return x.Stage9_Ev_Cutoff
	}
	return 0
}

func (x *Figure) GetStage10_Ev_Cutoff() int32 {
	if x != nil {
		return x.Stage10_Ev_Cutoff
	}
	return 0
}

type MultiFigure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Figures []*Figure `protobuf:"bytes,1,rep,name=figures,proto3" json:"figures,omitempty"`
}

func (x *MultiFigure) Reset() {
	*x = MultiFigure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiFigure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiFigure) ProtoMessage() {}

func (x *MultiFigure) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiFigure.ProtoReflect.Descriptor instead.
func (*MultiFigure) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{10}
}

func (x *MultiFigure) GetFigures() []*Figure {
	if x != nil {
		return x.Figures
	}
	return nil
}

type SkinInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skin_Id     string `protobuf:"bytes,1,opt,name=Skin_Id,json=SkinId,proto3" json:"Skin_Id,omitempty"`
	Skin_Name   string `protobuf:"bytes,2,opt,name=Skin_Name,json=SkinName,proto3" json:"Skin_Name,omitempty"`
	User_Email  string `protobuf:"bytes,3,opt,name=User_Email,json=UserEmail,proto3" json:"User_Email,omitempty"`
	Figure_Name string `protobuf:"bytes,4,opt,name=Figure_Name,json=FigureName,proto3" json:"Figure_Name,omitempty"`
}

func (x *SkinInstance) Reset() {
	*x = SkinInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkinInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkinInstance) ProtoMessage() {}

func (x *SkinInstance) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkinInstance.ProtoReflect.Descriptor instead.
func (*SkinInstance) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{11}
}

func (x *SkinInstance) GetSkin_Id() string {
	if x != nil {
		return x.Skin_Id
	}
	return ""
}

func (x *SkinInstance) GetSkin_Name() string {
	if x != nil {
		return x.Skin_Name
	}
	return ""
}

func (x *SkinInstance) GetUser_Email() string {
	if x != nil {
		return x.User_Email
	}
	return ""
}

func (x *SkinInstance) GetFigure_Name() string {
	if x != nil {
		return x.Figure_Name
	}
	return ""
}

type MultiSkinInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkinInstances []*SkinInstance `protobuf:"bytes,1,rep,name=skinInstances,proto3" json:"skinInstances,omitempty"`
}

func (x *MultiSkinInstance) Reset() {
	*x = MultiSkinInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSkinInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSkinInstance) ProtoMessage() {}

func (x *MultiSkinInstance) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSkinInstance.ProtoReflect.Descriptor instead.
func (*MultiSkinInstance) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{12}
}

func (x *MultiSkinInstance) GetSkinInstances() []*SkinInstance {
	if x != nil {
		return x.SkinInstances
	}
	return nil
}

type Skin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skin_Name   string `protobuf:"bytes,1,opt,name=Skin_Name,json=SkinName,proto3" json:"Skin_Name,omitempty"`
	Figure_Name string `protobuf:"bytes,2,opt,name=Figure_Name,json=FigureName,proto3" json:"Figure_Name,omitempty"`
	Price       int32  `protobuf:"varint,3,opt,name=Price,proto3" json:"Price,omitempty"`
}

func (x *Skin) Reset() {
	*x = Skin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skin) ProtoMessage() {}

func (x *Skin) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skin.ProtoReflect.Descriptor instead.
func (*Skin) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{13}
}

func (x *Skin) GetSkin_Name() string {
	if x != nil {
		return x.Skin_Name
	}
	return ""
}

func (x *Skin) GetFigure_Name() string {
	if x != nil {
		return x.Figure_Name
	}
	return ""
}

func (x *Skin) GetPrice() int32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type MultiSkin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skins []*Skin `protobuf:"bytes,1,rep,name=skins,proto3" json:"skins,omitempty"`
}

func (x *MultiSkin) Reset() {
	*x = MultiSkin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSkin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSkin) ProtoMessage() {}

func (x *MultiSkin) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSkin.ProtoReflect.Descriptor instead.
func (*MultiSkin) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{14}
}

func (x *MultiSkin) GetSkins() []*Skin {
	if x != nil {
		return x.Skins
	}
	return nil
}

type SurveyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=Email,proto3" json:"Email,omitempty"`
	Question string `protobuf:"bytes,2,opt,name=Question,proto3" json:"Question,omitempty"`
	Answer   string `protobuf:"bytes,3,opt,name=Answer,proto3" json:"Answer,omitempty"`
	Date     string `protobuf:"bytes,4,opt,name=Date,proto3" json:"Date,omitempty"`
}

func (x *SurveyResponse) Reset() {
	*x = SurveyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyResponse) ProtoMessage() {}

func (x *SurveyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyResponse.ProtoReflect.Descriptor instead.
func (*SurveyResponse) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{15}
}

func (x *SurveyResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SurveyResponse) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *SurveyResponse) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *SurveyResponse) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type MultiSurveyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyResponses []*SurveyResponse `protobuf:"bytes,1,rep,name=surveyResponses,proto3" json:"surveyResponses,omitempty"`
}

func (x *MultiSurveyResponse) Reset() {
	*x = MultiSurveyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiSurveyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiSurveyResponse) ProtoMessage() {}

func (x *MultiSurveyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiSurveyResponse.ProtoReflect.Descriptor instead.
func (*MultiSurveyResponse) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{16}
}

func (x *MultiSurveyResponse) GetSurveyResponses() []*SurveyResponse {
	if x != nil {
		return x.SurveyResponses
	}
	return nil
}

type OfflineDateTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email    string `protobuf:"bytes,1,opt,name=Email,proto3" json:"Email,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=Currency,proto3" json:"Currency,omitempty"`
}

func (x *OfflineDateTime) Reset() {
	*x = OfflineDateTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfflineDateTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfflineDateTime) ProtoMessage() {}

func (x *OfflineDateTime) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfflineDateTime.ProtoReflect.Descriptor instead.
func (*OfflineDateTime) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{17}
}

func (x *OfflineDateTime) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *OfflineDateTime) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type SubscriptionTimeStamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email          string `protobuf:"bytes,1,opt,name=Email,proto3" json:"Email,omitempty"`
	SubscribedOn   string `protobuf:"bytes,2,opt,name=SubscribedOn,proto3" json:"SubscribedOn,omitempty"`
	ExpiresOn      string `protobuf:"bytes,3,opt,name=ExpiresOn,proto3" json:"ExpiresOn,omitempty"`
	Transaction_Id string `protobuf:"bytes,4,opt,name=Transaction_Id,json=TransactionId,proto3" json:"Transaction_Id,omitempty"`
}

func (x *SubscriptionTimeStamp) Reset() {
	*x = SubscriptionTimeStamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionTimeStamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionTimeStamp) ProtoMessage() {}

func (x *SubscriptionTimeStamp) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionTimeStamp.ProtoReflect.Descriptor instead.
func (*SubscriptionTimeStamp) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{18}
}

func (x *SubscriptionTimeStamp) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SubscriptionTimeStamp) GetSubscribedOn() string {
	if x != nil {
		return x.SubscribedOn
	}
	return ""
}

func (x *SubscriptionTimeStamp) GetExpiresOn() string {
	if x != nil {
		return x.ExpiresOn
	}
	return ""
}

func (x *SubscriptionTimeStamp) GetTransaction_Id() string {
	if x != nil {
		return x.Transaction_Id
	}
	return ""
}

type UpdateEmailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldEmail string `protobuf:"bytes,1,opt,name=old_email,json=oldEmail,proto3" json:"old_email,omitempty"`
	NewEmail string `protobuf:"bytes,2,opt,name=new_email,json=newEmail,proto3" json:"new_email,omitempty"`
}

func (x *UpdateEmailRequest) Reset() {
	*x = UpdateEmailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateEmailRequest) ProtoMessage() {}

func (x *UpdateEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateEmailRequest.ProtoReflect.Descriptor instead.
func (*UpdateEmailRequest) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateEmailRequest) GetOldEmail() string {
	if x != nil {
		return x.OldEmail
	}
	return ""
}

func (x *UpdateEmailRequest) GetNewEmail() string {
	if x != nil {
		return x.NewEmail
	}
	return ""
}

type FriendRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserEmail   string `protobuf:"bytes,1,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	FriendEmail string `protobuf:"bytes,2,opt,name=friend_email,json=friendEmail,proto3" json:"friend_email,omitempty"`
}

func (x *FriendRequest) Reset() {
	*x = FriendRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendRequest) ProtoMessage() {}

func (x *FriendRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendRequest.ProtoReflect.Descriptor instead.
func (*FriendRequest) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{20}
}

func (x *FriendRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *FriendRequest) GetFriendEmail() string {
	if x != nil {
		return x.FriendEmail
	}
	return ""
}

type Friend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserEmail   string `protobuf:"bytes,1,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	FriendEmail string `protobuf:"bytes,2,opt,name=friend_email,json=friendEmail,proto3" json:"friend_email,omitempty"`
	Status      string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"` // "pending", "accepted", "blocked"
	CreatedAt   string `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   string `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *Friend) Reset() {
	*x = Friend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Friend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Friend) ProtoMessage() {}

func (x *Friend) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Friend.ProtoReflect.Descriptor instead.
func (*Friend) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{21}
}

func (x *Friend) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *Friend) GetFriendEmail() string {
	if x != nil {
		return x.FriendEmail
	}
	return ""
}

func (x *Friend) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Friend) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Friend) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type MultiFriends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Friends    []*Friend `protobuf:"bytes,1,rep,name=friends,proto3" json:"friends,omitempty"`
	TotalCount int32     `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *MultiFriends) Reset() {
	*x = MultiFriends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiFriends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiFriends) ProtoMessage() {}

func (x *MultiFriends) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiFriends.ProtoReflect.Descriptor instead.
func (*MultiFriends) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{22}
}

func (x *MultiFriends) GetFriends() []*Friend {
	if x != nil {
		return x.Friends
	}
	return nil
}

func (x *MultiFriends) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type FriendListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserEmail string `protobuf:"bytes,1,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	Status    string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Page      int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *FriendListRequest) Reset() {
	*x = FriendListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FriendListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FriendListRequest) ProtoMessage() {}

func (x *FriendListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FriendListRequest.ProtoReflect.Descriptor instead.
func (*FriendListRequest) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{23}
}

func (x *FriendListRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *FriendListRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FriendListRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FriendListRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// maybe useful for showing the user's stats
type UserStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserEmail       string `protobuf:"bytes,1,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	WeeklyPoints    int64  `protobuf:"varint,2,opt,name=weekly_points,json=weeklyPoints,proto3" json:"weekly_points,omitempty"`
	TotalPoints     int64  `protobuf:"varint,3,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	LastWeeklyReset string `protobuf:"bytes,4,opt,name=last_weekly_reset,json=lastWeeklyReset,proto3" json:"last_weekly_reset,omitempty"`
}

func (x *UserStats) Reset() {
	*x = UserStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStats) ProtoMessage() {}

func (x *UserStats) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStats.ProtoReflect.Descriptor instead.
func (*UserStats) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{24}
}

func (x *UserStats) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *UserStats) GetWeeklyPoints() int64 {
	if x != nil {
		return x.WeeklyPoints
	}
	return 0
}

func (x *UserStats) GetTotalPoints() int64 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *UserStats) GetLastWeeklyReset() string {
	if x != nil {
		return x.LastWeeklyReset
	}
	return ""
}

type LeaderboardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries    []*LeaderboardEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	UserRank   int32               `protobuf:"varint,2,opt,name=user_rank,json=userRank,proto3" json:"user_rank,omitempty"`       // used for requesting the user's rank
	TotalUsers int64               `protobuf:"varint,3,opt,name=total_users,json=totalUsers,proto3" json:"total_users,omitempty"` // Total number of users in this leaderboard
	UserPoints int64               `protobuf:"varint,4,opt,name=user_points,json=userPoints,proto3" json:"user_points,omitempty"`
}

func (x *LeaderboardResponse) Reset() {
	*x = LeaderboardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardResponse) ProtoMessage() {}

func (x *LeaderboardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardResponse.ProtoReflect.Descriptor instead.
func (*LeaderboardResponse) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{25}
}

func (x *LeaderboardResponse) GetEntries() []*LeaderboardEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *LeaderboardResponse) GetUserRank() int32 {
	if x != nil {
		return x.UserRank
	}
	return 0
}

func (x *LeaderboardResponse) GetTotalUsers() int64 {
	if x != nil {
		return x.TotalUsers
	}
	return 0
}

func (x *LeaderboardResponse) GetUserPoints() int64 {
	if x != nil {
		return x.UserPoints
	}
	return 0
}

type LeaderboardEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserEmail    string `protobuf:"bytes,1,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FigureName   string `protobuf:"bytes,3,opt,name=figure_name,json=figureName,proto3" json:"figure_name,omitempty"`
	WeeklyPoints int64  `protobuf:"varint,4,opt,name=weekly_points,json=weeklyPoints,proto3" json:"weekly_points,omitempty"`
	TotalPoints  int64  `protobuf:"varint,5,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	Streak       int32  `protobuf:"varint,6,opt,name=streak,proto3" json:"streak,omitempty"`
	Rank         int32  `protobuf:"varint,7,opt,name=rank,proto3" json:"rank,omitempty"`
	IsFriend     bool   `protobuf:"varint,8,opt,name=is_friend,json=isFriend,proto3" json:"is_friend,omitempty"`
}

func (x *LeaderboardEntry) Reset() {
	*x = LeaderboardEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardEntry) ProtoMessage() {}

func (x *LeaderboardEntry) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardEntry.ProtoReflect.Descriptor instead.
func (*LeaderboardEntry) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{26}
}

func (x *LeaderboardEntry) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *LeaderboardEntry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LeaderboardEntry) GetFigureName() string {
	if x != nil {
		return x.FigureName
	}
	return ""
}

func (x *LeaderboardEntry) GetWeeklyPoints() int64 {
	if x != nil {
		return x.WeeklyPoints
	}
	return 0
}

func (x *LeaderboardEntry) GetTotalPoints() int64 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *LeaderboardEntry) GetStreak() int32 {
	if x != nil {
		return x.Streak
	}
	return 0
}

func (x *LeaderboardEntry) GetRank() int32 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *LeaderboardEntry) GetIsFriend() bool {
	if x != nil {
		return x.IsFriend
	}
	return false
}

type LeaderboardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserEmail string               `protobuf:"bytes,1,opt,name=user_email,json=userEmail,proto3" json:"user_email,omitempty"`
	Type      LeaderboardType      `protobuf:"varint,2,opt,name=type,proto3,enum=routes.LeaderboardType" json:"type,omitempty"`
	TimeFrame LeaderboardTimeFrame `protobuf:"varint,3,opt,name=time_frame,json=timeFrame,proto3,enum=routes.LeaderboardTimeFrame" json:"time_frame,omitempty"`
	Page      int32                `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	PageSize  int32                `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // Used to set limit on how many friends to show up on the leaderboard
}

func (x *LeaderboardRequest) Reset() {
	*x = LeaderboardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_routes_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaderboardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaderboardRequest) ProtoMessage() {}

func (x *LeaderboardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_routes_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaderboardRequest.ProtoReflect.Descriptor instead.
func (*LeaderboardRequest) Descriptor() ([]byte, []int) {
	return file_routes_proto_rawDescGZIP(), []int{27}
}

func (x *LeaderboardRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *LeaderboardRequest) GetType() LeaderboardType {
	if x != nil {
		return x.Type
	}
	return LeaderboardType_GLOBAL
}

func (x *LeaderboardRequest) GetTimeFrame() LeaderboardTimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return LeaderboardTimeFrame_WEEKLY
}

func (x *LeaderboardRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *LeaderboardRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

var File_routes_proto protoreflect.FileDescriptor

var file_routes_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x88, 0x02, 0x0a, 0x07, 0x57, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x45, 0x76, 0x6f, 0x5f, 0x41, 0x64, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x45, 0x76, 0x6f, 0x41, 0x64, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x45, 0x6e,
	0x64, 0x5f, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x41, 0x64, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x41, 0x64, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x3b, 0x0a, 0x0c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x12, 0x2b, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x73, 0x22, 0xa7,
	0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x75, 0x72, 0x5f, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x75, 0x72, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x23, 0x0a, 0x0d,
	0x77, 0x65, 0x65, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x65, 0x65, 0x6b, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x75, 0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x4d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b,
	0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x2f, 0x0a, 0x14, 0x72, 0x65,
	0x61, 0x64, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x61, 0x64, 0x79, 0x46,
	0x6f, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x69,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x49, 0x6e, 0x47, 0x72, 0x61,
	0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x80, 0x03, 0x0a, 0x0d, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x55, 0x73,
	0x65, 0x72, 0x5f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x45, 0x76, 0x5f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x45, 0x76, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x45,
	0x76, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45,
	0x76, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12,
	0x2c, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x57, 0x65, 0x65, 0x6b, 0x5f, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x55, 0x73, 0x65,
	0x72, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x24, 0x0a,
	0x0e, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x57, 0x65, 0x65, 0x6b, 0x5f, 0x47, 0x6f, 0x61, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x47,
	0x6f, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x15, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x57, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x5f, 0x4d, 0x69, 0x6e, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x55, 0x73, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x4d,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x53, 0x0a, 0x12, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x0e, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x22, 0x2f, 0x0a, 0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72,
	0x73, 0x22, 0x8b, 0x02, 0x0a, 0x0e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x5f, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x5f, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x19, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x5f, 0x53, 0x6b, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x75, 0x72, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x45, 0x76, 0x5f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x45, 0x76, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x4d, 0x6f, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x5f, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x45, 0x76, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x76, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x57, 0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xb5, 0x04, 0x0a, 0x06, 0x46, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x5f, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x45, 0x76, 0x5f,
	0x47, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x42, 0x61, 0x73, 0x65,
	0x45, 0x76, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x42, 0x61, 0x73, 0x65, 0x5f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x47, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x42, 0x61, 0x73, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x47, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x31, 0x5f, 0x45, 0x76, 0x5f, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x31, 0x45, 0x76, 0x43, 0x75,
	0x74, 0x6f, 0x66, 0x66, 0x12, 0x28, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x67, 0x65, 0x32, 0x5f, 0x45,
	0x76, 0x5f, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x32, 0x45, 0x76, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x28,
	0x0a, 0x10, 0x53, 0x74, 0x61, 0x67, 0x65, 0x33, 0x5f, 0x45, 0x76, 0x5f, 0x43, 0x75, 0x74, 0x6f,
	0x66, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x33,
	0x45, 0x76, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x28, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x34, 0x5f, 0x45, 0x76, 0x5f, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x34, 0x45, 0x76, 0x43, 0x75, 0x74, 0x6f,
	0x66, 0x66, 0x12, 0x28, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x67, 0x65, 0x35, 0x5f, 0x45, 0x76, 0x5f,
	0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x35, 0x45, 0x76, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x28, 0x0a, 0x10,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x36, 0x5f, 0x45, 0x76, 0x5f, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x36, 0x45, 0x76,
	0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x28, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x67, 0x65, 0x37,
	0x5f, 0x45, 0x76, 0x5f, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x37, 0x45, 0x76, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66,
	0x12, 0x28, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x67, 0x65, 0x38, 0x5f, 0x45, 0x76, 0x5f, 0x43, 0x75,
	0x74, 0x6f, 0x66, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x67,
	0x65, 0x38, 0x45, 0x76, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x28, 0x0a, 0x10, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x39, 0x5f, 0x45, 0x76, 0x5f, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x39, 0x45, 0x76, 0x43, 0x75,
	0x74, 0x6f, 0x66, 0x66, 0x12, 0x2a, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x67, 0x65, 0x31, 0x30, 0x5f,
	0x45, 0x76, 0x5f, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x31, 0x30, 0x45, 0x76, 0x43, 0x75, 0x74, 0x6f, 0x66, 0x66,
	0x22, 0x37, 0x0a, 0x0b, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12,
	0x28, 0x0a, 0x07, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x52, 0x07, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x53, 0x6b,
	0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x53, 0x6b,
	0x69, 0x6e, 0x5f, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6b, 0x69,
	0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x53, 0x6b, 0x69, 0x6e, 0x5f, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6b, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x5f, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x4f, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x22, 0x5a, 0x0a, 0x04, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x53, 0x6b, 0x69,
	0x6e, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x6b,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x2f, 0x0a,
	0x09, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x6b,
	0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6e, 0x73, 0x22, 0x6e,
	0x0a, 0x0e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x22, 0x57,
	0x0a, 0x13, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x0f, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x96, 0x01, 0x0a,
	0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x4f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x4f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x6c, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x6c, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x65, 0x77,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x51, 0x0a, 0x0d, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xa0, 0x01, 0x0a, 0x06, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x59, 0x0a, 0x0c, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x66,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x07, 0x66, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7b, 0x0a, 0x11, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x22, 0xa8, 0x01, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x1f, 0x0a,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0xf7, 0x01, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x65, 0x65, 0x6b,
	0x6c, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x12, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0a,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x2a, 0x2f, 0x0a, 0x0f, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x47, 0x4c, 0x4f, 0x42, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x52, 0x49,
	0x45, 0x4e, 0x44, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x2a, 0x30, 0x0a, 0x14, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x32, 0xa8, 0x1f,
	0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x1a, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22,
	0x00, 0x12, 0x2a, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0c, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x2a, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6b, 0x12, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0c,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0c, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x12, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x00,
	0x12, 0x45, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0x15,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x15,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0x15, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x1a, 0x1a, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x00, 0x12,
	0x33, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x0c,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x14, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x12, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x1a, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x6f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x1a, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x12, 0x0f, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x1a, 0x0f, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75, 0x74, 0x22, 0x00,
	0x12, 0x33, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x6f, 0x75,
	0x74, 0x12, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6f,
	0x75, 0x74, 0x1a, 0x0f, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x6f, 0x75, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x1a, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x16, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x1a, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x1b,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x67,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x1a, 0x0e, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x1a, 0x0e, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12, 0x30,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x0e,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x1a, 0x0e,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x22, 0x00,
	0x12, 0x30, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x12, 0x0e, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x1a, 0x0e, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x00,
	0x12, 0x42, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x14, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6b,
	0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x1a, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x14,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x1a, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x6b,
	0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x53, 0x6b, 0x69, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x19,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6b, 0x69,
	0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x53, 0x6b, 0x69, 0x6e, 0x1a, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x6b,
	0x69, 0x6e, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6b,
	0x69, 0x6e, 0x12, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6e,
	0x1a, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x22, 0x00,
	0x12, 0x2a, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x0c,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x1a, 0x0c, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6b, 0x69, 0x6e, 0x12, 0x0c, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x1a, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x53, 0x6b, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53,
	0x6b, 0x69, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x6b, 0x69, 0x6e, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x16,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x1a, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x14,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x16, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x0c, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x1a, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x1a, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x17,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x17, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x17, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x2e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x6d, 0x70, 0x1a, 0x1d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x1a, 0x1d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22,
	0x00, 0x12, 0x5d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x1a,
	0x1d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x00,
	0x12, 0x5d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x1d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x1d,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x0b, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x65, 0x63, 0x61, 0x79, 0x12, 0x16,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x67, 0x75, 0x72, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x1d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x57,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x0c, 0x2e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x11, 0x53, 0x65, 0x6e,
	0x64, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x13, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46,
	0x72, 0x69, 0x65, 0x6e, 0x64, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x19, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x00,
	0x12, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x15, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x2e,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0c, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x11, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x10, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_routes_proto_rawDescOnce sync.Once
	file_routes_proto_rawDescData = file_routes_proto_rawDesc
)

func file_routes_proto_rawDescGZIP() []byte {
	file_routes_proto_rawDescOnce.Do(func() {
		file_routes_proto_rawDescData = protoimpl.X.CompressGZIP(file_routes_proto_rawDescData)
	})
	return file_routes_proto_rawDescData
}

var file_routes_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_routes_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_routes_proto_goTypes = []any{
	(LeaderboardType)(0),          // 0: routes.LeaderboardType
	(LeaderboardTimeFrame)(0),     // 1: routes.LeaderboardTimeFrame
	(*GenericStringResponse)(nil), // 2: routes.GenericStringResponse
	(*Workout)(nil),               // 3: routes.Workout
	(*MultiWorkout)(nil),          // 4: routes.MultiWorkout
	(*User)(nil),                  // 5: routes.User
	(*DailySnapshot)(nil),         // 6: routes.DailySnapshot
	(*MultiDailySnapshot)(nil),    // 7: routes.MultiDailySnapshot
	(*MultiUser)(nil),             // 8: routes.MultiUser
	(*FigureInstance)(nil),        // 9: routes.FigureInstance
	(*MultiFigureInstance)(nil),   // 10: routes.MultiFigureInstance
	(*Figure)(nil),                // 11: routes.Figure
	(*MultiFigure)(nil),           // 12: routes.MultiFigure
	(*SkinInstance)(nil),          // 13: routes.SkinInstance
	(*MultiSkinInstance)(nil),     // 14: routes.MultiSkinInstance
	(*Skin)(nil),                  // 15: routes.Skin
	(*MultiSkin)(nil),             // 16: routes.MultiSkin
	(*SurveyResponse)(nil),        // 17: routes.SurveyResponse
	(*MultiSurveyResponse)(nil),   // 18: routes.MultiSurveyResponse
	(*OfflineDateTime)(nil),       // 19: routes.OfflineDateTime
	(*SubscriptionTimeStamp)(nil), // 20: routes.SubscriptionTimeStamp
	(*UpdateEmailRequest)(nil),    // 21: routes.UpdateEmailRequest
	(*FriendRequest)(nil),         // 22: routes.FriendRequest
	(*Friend)(nil),                // 23: routes.Friend
	(*MultiFriends)(nil),          // 24: routes.MultiFriends
	(*FriendListRequest)(nil),     // 25: routes.FriendListRequest
	(*UserStats)(nil),             // 26: routes.UserStats
	(*LeaderboardResponse)(nil),   // 27: routes.LeaderboardResponse
	(*LeaderboardEntry)(nil),      // 28: routes.LeaderboardEntry
	(*LeaderboardRequest)(nil),    // 29: routes.LeaderboardRequest
	(*emptypb.Empty)(nil),         // 30: google.protobuf.Empty
}
var file_routes_proto_depIdxs = []int32{
	3,  // 0: routes.MultiWorkout.workouts:type_name -> routes.Workout
	6,  // 1: routes.MultiDailySnapshot.dailySnapshots:type_name -> routes.DailySnapshot
	5,  // 2: routes.MultiUser.users:type_name -> routes.User
	9,  // 3: routes.MultiFigureInstance.figureInstances:type_name -> routes.FigureInstance
	11, // 4: routes.MultiFigure.figures:type_name -> routes.Figure
	13, // 5: routes.MultiSkinInstance.skinInstances:type_name -> routes.SkinInstance
	15, // 6: routes.MultiSkin.skins:type_name -> routes.Skin
	17, // 7: routes.MultiSurveyResponse.surveyResponses:type_name -> routes.SurveyResponse
	23, // 8: routes.MultiFriends.friends:type_name -> routes.Friend
	28, // 9: routes.LeaderboardResponse.entries:type_name -> routes.LeaderboardEntry
	0,  // 10: routes.LeaderboardRequest.type:type_name -> routes.LeaderboardType
	1,  // 11: routes.LeaderboardRequest.time_frame:type_name -> routes.LeaderboardTimeFrame
	5,  // 12: routes.Routes.GetUser:input_type -> routes.User
	5,  // 13: routes.Routes.CreateUser:input_type -> routes.User
	5,  // 14: routes.Routes.UpdateUser:input_type -> routes.User
	5,  // 15: routes.Routes.DeleteUser:input_type -> routes.User
	21, // 16: routes.Routes.UpdateUserEmail:input_type -> routes.UpdateEmailRequest
	5,  // 17: routes.Routes.ResetUserStreak:input_type -> routes.User
	5,  // 18: routes.Routes.ResetUserWeekComplete:input_type -> routes.User
	6,  // 19: routes.Routes.GetDailySnapshot:input_type -> routes.DailySnapshot
	6,  // 20: routes.Routes.UpdateDailySnapshot:input_type -> routes.DailySnapshot
	6,  // 21: routes.Routes.CreateDailySnapshot:input_type -> routes.DailySnapshot
	6,  // 22: routes.Routes.DeleteDailySnapshot:input_type -> routes.DailySnapshot
	6,  // 23: routes.Routes.GetDailySnapshots:input_type -> routes.DailySnapshot
	5,  // 24: routes.Routes.GetWorkouts:input_type -> routes.User
	3,  // 25: routes.Routes.GetWorkout:input_type -> routes.Workout
	3,  // 26: routes.Routes.CreateWorkout:input_type -> routes.Workout
	3,  // 27: routes.Routes.UpdateWorkout:input_type -> routes.Workout
	3,  // 28: routes.Routes.DeleteWorkout:input_type -> routes.Workout
	9,  // 29: routes.Routes.GetFigureInstance:input_type -> routes.FigureInstance
	9,  // 30: routes.Routes.UpdateFigureInstance:input_type -> routes.FigureInstance
	9,  // 31: routes.Routes.CreateFigureInstance:input_type -> routes.FigureInstance
	9,  // 32: routes.Routes.DeleteFigureInstance:input_type -> routes.FigureInstance
	5,  // 33: routes.Routes.GetFigureInstances:input_type -> routes.User
	11, // 34: routes.Routes.GetFigure:input_type -> routes.Figure
	11, // 35: routes.Routes.UpdateFigure:input_type -> routes.Figure
	11, // 36: routes.Routes.CreateFigure:input_type -> routes.Figure
	11, // 37: routes.Routes.DeleteFigure:input_type -> routes.Figure
	30, // 38: routes.Routes.GetFigures:input_type -> google.protobuf.Empty
	13, // 39: routes.Routes.GetSkinInstance:input_type -> routes.SkinInstance
	13, // 40: routes.Routes.UpdateSkinInstance:input_type -> routes.SkinInstance
	13, // 41: routes.Routes.CreateSkinInstance:input_type -> routes.SkinInstance
	13, // 42: routes.Routes.DeleteSkinInstance:input_type -> routes.SkinInstance
	5,  // 43: routes.Routes.GetSkinInstances:input_type -> routes.User
	15, // 44: routes.Routes.GetSkin:input_type -> routes.Skin
	15, // 45: routes.Routes.UpdateSkin:input_type -> routes.Skin
	15, // 46: routes.Routes.CreateSkin:input_type -> routes.Skin
	15, // 47: routes.Routes.DeleteSkin:input_type -> routes.Skin
	30, // 48: routes.Routes.GetSkins:input_type -> google.protobuf.Empty
	17, // 49: routes.Routes.GetSurveyResponse:input_type -> routes.SurveyResponse
	17, // 50: routes.Routes.UpdateSurveyResponse:input_type -> routes.SurveyResponse
	17, // 51: routes.Routes.CreateSurveyResponse:input_type -> routes.SurveyResponse
	17, // 52: routes.Routes.DeleteSurveyResponse:input_type -> routes.SurveyResponse
	5,  // 53: routes.Routes.GetSurveyResponses:input_type -> routes.User
	18, // 54: routes.Routes.CreateSurveyResponseMulti:input_type -> routes.MultiSurveyResponse
	19, // 55: routes.Routes.GetOfflineDateTime:input_type -> routes.OfflineDateTime
	19, // 56: routes.Routes.UpdateOfflineDateTime:input_type -> routes.OfflineDateTime
	19, // 57: routes.Routes.DeleteOfflineDateTime:input_type -> routes.OfflineDateTime
	20, // 58: routes.Routes.CreateSubscriptionTimeStamp:input_type -> routes.SubscriptionTimeStamp
	20, // 59: routes.Routes.GetSubscriptionTimeStamp:input_type -> routes.SubscriptionTimeStamp
	20, // 60: routes.Routes.UpdateSubscriptionTimeStamp:input_type -> routes.SubscriptionTimeStamp
	20, // 61: routes.Routes.DeleteSubscriptionTimeStamp:input_type -> routes.SubscriptionTimeStamp
	9,  // 62: routes.Routes.FigureDecay:input_type -> routes.FigureInstance
	5,  // 63: routes.Routes.UserWeeklyReset:input_type -> routes.User
	22, // 64: routes.Routes.SendFriendRequest:input_type -> routes.FriendRequest
	22, // 65: routes.Routes.AcceptFriendRequest:input_type -> routes.FriendRequest
	22, // 66: routes.Routes.RejectFriendRequest:input_type -> routes.FriendRequest
	22, // 67: routes.Routes.RemoveFriend:input_type -> routes.FriendRequest
	25, // 68: routes.Routes.GetFriends:input_type -> routes.FriendListRequest
	25, // 69: routes.Routes.GetPendingRequests:input_type -> routes.FriendListRequest
	22, // 70: routes.Routes.CheckFriendshipStatus:input_type -> routes.FriendRequest
	29, // 71: routes.Routes.GetLeaderboard:input_type -> routes.LeaderboardRequest
	5,  // 72: routes.Routes.GetUserStats:input_type -> routes.User
	30, // 73: routes.Routes.ResetWeeklyStats:input_type -> google.protobuf.Empty
	5,  // 74: routes.Routes.GetUser:output_type -> routes.User
	5,  // 75: routes.Routes.CreateUser:output_type -> routes.User
	5,  // 76: routes.Routes.UpdateUser:output_type -> routes.User
	5,  // 77: routes.Routes.DeleteUser:output_type -> routes.User
	5,  // 78: routes.Routes.UpdateUserEmail:output_type -> routes.User
	5,  // 79: routes.Routes.ResetUserStreak:output_type -> routes.User
	5,  // 80: routes.Routes.ResetUserWeekComplete:output_type -> routes.User
	6,  // 81: routes.Routes.GetDailySnapshot:output_type -> routes.DailySnapshot
	6,  // 82: routes.Routes.UpdateDailySnapshot:output_type -> routes.DailySnapshot
	6,  // 83: routes.Routes.CreateDailySnapshot:output_type -> routes.DailySnapshot
	6,  // 84: routes.Routes.DeleteDailySnapshot:output_type -> routes.DailySnapshot
	7,  // 85: routes.Routes.GetDailySnapshots:output_type -> routes.MultiDailySnapshot
	4,  // 86: routes.Routes.GetWorkouts:output_type -> routes.MultiWorkout
	3,  // 87: routes.Routes.GetWorkout:output_type -> routes.Workout
	3,  // 88: routes.Routes.CreateWorkout:output_type -> routes.Workout
	3,  // 89: routes.Routes.UpdateWorkout:output_type -> routes.Workout
	3,  // 90: routes.Routes.DeleteWorkout:output_type -> routes.Workout
	9,  // 91: routes.Routes.GetFigureInstance:output_type -> routes.FigureInstance
	9,  // 92: routes.Routes.UpdateFigureInstance:output_type -> routes.FigureInstance
	9,  // 93: routes.Routes.CreateFigureInstance:output_type -> routes.FigureInstance
	9,  // 94: routes.Routes.DeleteFigureInstance:output_type -> routes.FigureInstance
	10, // 95: routes.Routes.GetFigureInstances:output_type -> routes.MultiFigureInstance
	11, // 96: routes.Routes.GetFigure:output_type -> routes.Figure
	11, // 97: routes.Routes.UpdateFigure:output_type -> routes.Figure
	11, // 98: routes.Routes.CreateFigure:output_type -> routes.Figure
	11, // 99: routes.Routes.DeleteFigure:output_type -> routes.Figure
	12, // 100: routes.Routes.GetFigures:output_type -> routes.MultiFigure
	13, // 101: routes.Routes.GetSkinInstance:output_type -> routes.SkinInstance
	13, // 102: routes.Routes.UpdateSkinInstance:output_type -> routes.SkinInstance
	13, // 103: routes.Routes.CreateSkinInstance:output_type -> routes.SkinInstance
	13, // 104: routes.Routes.DeleteSkinInstance:output_type -> routes.SkinInstance
	14, // 105: routes.Routes.GetSkinInstances:output_type -> routes.MultiSkinInstance
	15, // 106: routes.Routes.GetSkin:output_type -> routes.Skin
	15, // 107: routes.Routes.UpdateSkin:output_type -> routes.Skin
	15, // 108: routes.Routes.CreateSkin:output_type -> routes.Skin
	15, // 109: routes.Routes.DeleteSkin:output_type -> routes.Skin
	16, // 110: routes.Routes.GetSkins:output_type -> routes.MultiSkin
	17, // 111: routes.Routes.GetSurveyResponse:output_type -> routes.SurveyResponse
	17, // 112: routes.Routes.UpdateSurveyResponse:output_type -> routes.SurveyResponse
	17, // 113: routes.Routes.CreateSurveyResponse:output_type -> routes.SurveyResponse
	17, // 114: routes.Routes.DeleteSurveyResponse:output_type -> routes.SurveyResponse
	18, // 115: routes.Routes.GetSurveyResponses:output_type -> routes.MultiSurveyResponse
	18, // 116: routes.Routes.CreateSurveyResponseMulti:output_type -> routes.MultiSurveyResponse
	19, // 117: routes.Routes.GetOfflineDateTime:output_type -> routes.OfflineDateTime
	19, // 118: routes.Routes.UpdateOfflineDateTime:output_type -> routes.OfflineDateTime
	19, // 119: routes.Routes.DeleteOfflineDateTime:output_type -> routes.OfflineDateTime
	20, // 120: routes.Routes.CreateSubscriptionTimeStamp:output_type -> routes.SubscriptionTimeStamp
	20, // 121: routes.Routes.GetSubscriptionTimeStamp:output_type -> routes.SubscriptionTimeStamp
	20, // 122: routes.Routes.UpdateSubscriptionTimeStamp:output_type -> routes.SubscriptionTimeStamp
	20, // 123: routes.Routes.DeleteSubscriptionTimeStamp:output_type -> routes.SubscriptionTimeStamp
	2,  // 124: routes.Routes.FigureDecay:output_type -> routes.GenericStringResponse
	2,  // 125: routes.Routes.UserWeeklyReset:output_type -> routes.GenericStringResponse
	23, // 126: routes.Routes.SendFriendRequest:output_type -> routes.Friend
	23, // 127: routes.Routes.AcceptFriendRequest:output_type -> routes.Friend
	23, // 128: routes.Routes.RejectFriendRequest:output_type -> routes.Friend
	2,  // 129: routes.Routes.RemoveFriend:output_type -> routes.GenericStringResponse
	24, // 130: routes.Routes.GetFriends:output_type -> routes.MultiFriends
	24, // 131: routes.Routes.GetPendingRequests:output_type -> routes.MultiFriends
	23, // 132: routes.Routes.CheckFriendshipStatus:output_type -> routes.Friend
	27, // 133: routes.Routes.GetLeaderboard:output_type -> routes.LeaderboardResponse
	26, // 134: routes.Routes.GetUserStats:output_type -> routes.UserStats
	2,  // 135: routes.Routes.ResetWeeklyStats:output_type -> routes.GenericStringResponse
	74, // [74:136] is the sub-list for method output_type
	12, // [12:74] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_routes_proto_init() }
func file_routes_proto_init() {
	if File_routes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_routes_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*GenericStringResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Workout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*MultiWorkout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DailySnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*MultiDailySnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MultiUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*FigureInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*MultiFigureInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Figure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MultiFigure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*SkinInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSkinInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*Skin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSkin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SurveyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*MultiSurveyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*OfflineDateTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*SubscriptionTimeStamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateEmailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*FriendRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*Friend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*MultiFriends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*FriendListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*UserStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*LeaderboardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*LeaderboardEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_routes_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*LeaderboardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_routes_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_routes_proto_goTypes,
		DependencyIndexes: file_routes_proto_depIdxs,
		EnumInfos:         file_routes_proto_enumTypes,
		MessageInfos:      file_routes_proto_msgTypes,
	}.Build()
	File_routes_proto = out.File
	file_routes_proto_rawDesc = nil
	file_routes_proto_goTypes = nil
	file_routes_proto_depIdxs = nil
}
