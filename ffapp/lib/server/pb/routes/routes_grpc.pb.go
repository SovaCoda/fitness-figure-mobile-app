// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: routes.proto

package routes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Routes_GetUser_FullMethodName       = "/routes.Routes/GetUser"
	Routes_CreateUser_FullMethodName    = "/routes.Routes/CreateUser"
	Routes_UpdateUser_FullMethodName    = "/routes.Routes/UpdateUser"
	Routes_DeleteUser_FullMethodName    = "/routes.Routes/DeleteUser"
	Routes_GetWorkouts_FullMethodName   = "/routes.Routes/GetWorkouts"
	Routes_GetWorkout_FullMethodName    = "/routes.Routes/GetWorkout"
	Routes_CreateWorkout_FullMethodName = "/routes.Routes/CreateWorkout"
	Routes_UpdateWorkout_FullMethodName = "/routes.Routes/UpdateWorkout"
	Routes_DeleteWorkout_FullMethodName = "/routes.Routes/DeleteWorkout"
)

// RoutesClient is the client API for Routes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutesClient interface {
	// USER ROUTES //
	GetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// WORKOUT ROUTES //
	GetWorkouts(ctx context.Context, in *User, opts ...grpc.CallOption) (*MultiWorkout, error)
	GetWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error)
	CreateWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error)
	UpdateWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error)
	DeleteWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error)
	// FIGURE ROUTES //
	GetFigure(ctx context.Context, in *Figure, opts ...grpc.CallOption) (*Figure, error)
	UpdateFigure(ctx context.Context, in *Figure, opts ...grpc.CallOption) (*Figure, error)
	CreateFigure(ctx context.Context, in *Figure, opts ...grpc.CallOption) (*Figure, error)
	DeleteFigure(ctx context.Context, in *Figure, opts ...grpc.CallOption) (*Figure, error)
	GetFigures(ctx context.Context, in *User, opts ...grpc.CallOption) (*MultiFigure, error)
}

type routesClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutesClient(cc grpc.ClientConnInterface) RoutesClient {
	return &routesClient{cc}
}

func (c *routesClient) GetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, Routes_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, Routes_CreateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, Routes_UpdateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, Routes_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetWorkouts(ctx context.Context, in *User, opts ...grpc.CallOption) (*MultiWorkout, error) {
	out := new(MultiWorkout)
	err := c.cc.Invoke(ctx, Routes_GetWorkouts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error) {
	out := new(Workout)
	err := c.cc.Invoke(ctx, Routes_GetWorkout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) CreateWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error) {
	out := new(Workout)
	err := c.cc.Invoke(ctx, Routes_CreateWorkout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) UpdateWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error) {
	out := new(Workout)
	err := c.cc.Invoke(ctx, Routes_UpdateWorkout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) DeleteWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error) {
	out := new(Workout)
	err := c.cc.Invoke(ctx, Routes_DeleteWorkout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetFigure(ctx context.Context, in *Figure, opts ...grpc.CallOption) (*Figure, error) {
	out := new(Figure)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetFigure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) UpdateFigure(ctx context.Context, in *Figure, opts ...grpc.CallOption) (*Figure, error) {
	out := new(Figure)
	err := c.cc.Invoke(ctx, "/routes.Routes/UpdateFigure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) CreateFigure(ctx context.Context, in *Figure, opts ...grpc.CallOption) (*Figure, error) {
	out := new(Figure)
	err := c.cc.Invoke(ctx, "/routes.Routes/CreateFigure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) DeleteFigure(ctx context.Context, in *Figure, opts ...grpc.CallOption) (*Figure, error) {
	out := new(Figure)
	err := c.cc.Invoke(ctx, "/routes.Routes/DeleteFigure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetFigures(ctx context.Context, in *User, opts ...grpc.CallOption) (*MultiFigure, error) {
	out := new(MultiFigure)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetFigures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutesServer is the server API for Routes service.
// All implementations must embed UnimplementedRoutesServer
// for forward compatibility
type RoutesServer interface {
	// USER ROUTES //
	GetUser(context.Context, *User) (*User, error)
	CreateUser(context.Context, *User) (*User, error)
	UpdateUser(context.Context, *User) (*User, error)
	DeleteUser(context.Context, *User) (*User, error)
	// WORKOUT ROUTES //
	GetWorkouts(context.Context, *User) (*MultiWorkout, error)
	GetWorkout(context.Context, *Workout) (*Workout, error)
	CreateWorkout(context.Context, *Workout) (*Workout, error)
	UpdateWorkout(context.Context, *Workout) (*Workout, error)
	DeleteWorkout(context.Context, *Workout) (*Workout, error)
	// FIGURE ROUTES //
	GetFigure(context.Context, *Figure) (*Figure, error)
	UpdateFigure(context.Context, *Figure) (*Figure, error)
	CreateFigure(context.Context, *Figure) (*Figure, error)
	DeleteFigure(context.Context, *Figure) (*Figure, error)
	GetFigures(context.Context, *User) (*MultiFigure, error)
	mustEmbedUnimplementedRoutesServer()
}

// UnimplementedRoutesServer must be embedded to have forward compatible implementations.
type UnimplementedRoutesServer struct {
}

func (UnimplementedRoutesServer) GetUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedRoutesServer) CreateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedRoutesServer) UpdateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedRoutesServer) DeleteUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedRoutesServer) GetWorkouts(context.Context, *User) (*MultiWorkout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkouts not implemented")
}
func (UnimplementedRoutesServer) GetWorkout(context.Context, *Workout) (*Workout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkout not implemented")
}
func (UnimplementedRoutesServer) CreateWorkout(context.Context, *Workout) (*Workout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkout not implemented")
}
func (UnimplementedRoutesServer) UpdateWorkout(context.Context, *Workout) (*Workout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkout not implemented")
}
func (UnimplementedRoutesServer) DeleteWorkout(context.Context, *Workout) (*Workout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkout not implemented")
}
func (UnimplementedRoutesServer) GetFigure(context.Context, *Figure) (*Figure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFigure not implemented")
}
func (UnimplementedRoutesServer) UpdateFigure(context.Context, *Figure) (*Figure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFigure not implemented")
}
func (UnimplementedRoutesServer) CreateFigure(context.Context, *Figure) (*Figure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFigure not implemented")
}
func (UnimplementedRoutesServer) DeleteFigure(context.Context, *Figure) (*Figure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFigure not implemented")
}
func (UnimplementedRoutesServer) GetFigures(context.Context, *User) (*MultiFigure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFigures not implemented")
}
func (UnimplementedRoutesServer) mustEmbedUnimplementedRoutesServer() {}

// UnsafeRoutesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutesServer will
// result in compilation errors.
type UnsafeRoutesServer interface {
	mustEmbedUnimplementedRoutesServer()
}

func RegisterRoutesServer(s grpc.ServiceRegistrar, srv RoutesServer) {
	s.RegisterService(&Routes_ServiceDesc, srv)
}

func _Routes_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Routes_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Routes_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Routes_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Routes_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).DeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetWorkouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetWorkouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Routes_GetWorkouts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetWorkouts(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Routes_GetWorkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetWorkout(ctx, req.(*Workout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_CreateWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).CreateWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Routes_CreateWorkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).CreateWorkout(ctx, req.(*Workout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_UpdateWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UpdateWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Routes_UpdateWorkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UpdateWorkout(ctx, req.(*Workout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_DeleteWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).DeleteWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Routes_DeleteWorkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).DeleteWorkout(ctx, req.(*Workout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetFigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Figure)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetFigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetFigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetFigure(ctx, req.(*Figure))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_UpdateFigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Figure)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UpdateFigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/UpdateFigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UpdateFigure(ctx, req.(*Figure))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_CreateFigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Figure)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).CreateFigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/CreateFigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).CreateFigure(ctx, req.(*Figure))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_DeleteFigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Figure)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).DeleteFigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/DeleteFigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).DeleteFigure(ctx, req.(*Figure))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetFigures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetFigures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetFigures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetFigures(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// Routes_ServiceDesc is the grpc.ServiceDesc for Routes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Routes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routes.Routes",
	HandlerType: (*RoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _Routes_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Routes_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Routes_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Routes_DeleteUser_Handler,
		},
		{
			MethodName: "GetWorkouts",
			Handler:    _Routes_GetWorkouts_Handler,
		},
		{
			MethodName: "GetWorkout",
			Handler:    _Routes_GetWorkout_Handler,
		},
		{
			MethodName: "CreateWorkout",
			Handler:    _Routes_CreateWorkout_Handler,
		},
		{
			MethodName: "UpdateWorkout",
			Handler:    _Routes_UpdateWorkout_Handler,
		},
		{
			MethodName: "DeleteWorkout",
			Handler:    _Routes_DeleteWorkout_Handler,
		},
		{
			MethodName: "GetFigure",
			Handler:    _Routes_GetFigure_Handler,
		},
		{
			MethodName: "UpdateFigure",
			Handler:    _Routes_UpdateFigure_Handler,
		},
		{
			MethodName: "CreateFigure",
			Handler:    _Routes_CreateFigure_Handler,
		},
		{
			MethodName: "DeleteFigure",
			Handler:    _Routes_DeleteFigure_Handler,
		},
		{
			MethodName: "GetFigures",
			Handler:    _Routes_GetFigures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routes.proto",
}
