// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0
// source: routes.proto

package routes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoutesClient is the client API for Routes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutesClient interface {
	// USER ROUTES //
	GetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	UpdateUserEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*User, error)
	ResetUserStreak(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	ResetUserWeekComplete(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// DAILY SNAPSHOT ROUTES //
	GetDailySnapshot(ctx context.Context, in *DailySnapshot, opts ...grpc.CallOption) (*DailySnapshot, error)
	UpdateDailySnapshot(ctx context.Context, in *DailySnapshot, opts ...grpc.CallOption) (*DailySnapshot, error)
	CreateDailySnapshot(ctx context.Context, in *DailySnapshot, opts ...grpc.CallOption) (*DailySnapshot, error)
	DeleteDailySnapshot(ctx context.Context, in *DailySnapshot, opts ...grpc.CallOption) (*DailySnapshot, error)
	GetDailySnapshots(ctx context.Context, in *DailySnapshot, opts ...grpc.CallOption) (*MultiDailySnapshot, error)
	// WORKOUT ROUTES //
	GetWorkouts(ctx context.Context, in *User, opts ...grpc.CallOption) (*MultiWorkout, error)
	GetWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error)
	CreateWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error)
	UpdateWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error)
	DeleteWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error)
	// FIGURE INSTANCE ROUTES //
	GetFigureInstance(ctx context.Context, in *FigureInstance, opts ...grpc.CallOption) (*FigureInstance, error)
	UpdateFigureInstance(ctx context.Context, in *FigureInstance, opts ...grpc.CallOption) (*FigureInstance, error)
	CreateFigureInstance(ctx context.Context, in *FigureInstance, opts ...grpc.CallOption) (*FigureInstance, error)
	DeleteFigureInstance(ctx context.Context, in *FigureInstance, opts ...grpc.CallOption) (*FigureInstance, error)
	GetFigureInstances(ctx context.Context, in *User, opts ...grpc.CallOption) (*MultiFigureInstance, error)
	// FIGURE ROUTES //
	GetFigure(ctx context.Context, in *Figure, opts ...grpc.CallOption) (*Figure, error)
	UpdateFigure(ctx context.Context, in *Figure, opts ...grpc.CallOption) (*Figure, error)
	CreateFigure(ctx context.Context, in *Figure, opts ...grpc.CallOption) (*Figure, error)
	DeleteFigure(ctx context.Context, in *Figure, opts ...grpc.CallOption) (*Figure, error)
	GetFigures(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MultiFigure, error)
	// SKIN INSTANCE ROUTES //
	GetSkinInstance(ctx context.Context, in *SkinInstance, opts ...grpc.CallOption) (*SkinInstance, error)
	UpdateSkinInstance(ctx context.Context, in *SkinInstance, opts ...grpc.CallOption) (*SkinInstance, error)
	CreateSkinInstance(ctx context.Context, in *SkinInstance, opts ...grpc.CallOption) (*SkinInstance, error)
	DeleteSkinInstance(ctx context.Context, in *SkinInstance, opts ...grpc.CallOption) (*SkinInstance, error)
	GetSkinInstances(ctx context.Context, in *User, opts ...grpc.CallOption) (*MultiSkinInstance, error)
	// SKIN ROUTES //
	GetSkin(ctx context.Context, in *Skin, opts ...grpc.CallOption) (*Skin, error)
	UpdateSkin(ctx context.Context, in *Skin, opts ...grpc.CallOption) (*Skin, error)
	CreateSkin(ctx context.Context, in *Skin, opts ...grpc.CallOption) (*Skin, error)
	DeleteSkin(ctx context.Context, in *Skin, opts ...grpc.CallOption) (*Skin, error)
	GetSkins(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MultiSkin, error)
	// SURVEY ROUTES //
	GetSurveyResponse(ctx context.Context, in *SurveyResponse, opts ...grpc.CallOption) (*SurveyResponse, error)
	UpdateSurveyResponse(ctx context.Context, in *SurveyResponse, opts ...grpc.CallOption) (*SurveyResponse, error)
	CreateSurveyResponse(ctx context.Context, in *SurveyResponse, opts ...grpc.CallOption) (*SurveyResponse, error)
	DeleteSurveyResponse(ctx context.Context, in *SurveyResponse, opts ...grpc.CallOption) (*SurveyResponse, error)
	GetSurveyResponses(ctx context.Context, in *User, opts ...grpc.CallOption) (*MultiSurveyResponse, error)
	CreateSurveyResponseMulti(ctx context.Context, in *MultiSurveyResponse, opts ...grpc.CallOption) (*MultiSurveyResponse, error)
	// GENERATION ROUTES //
	GetOfflineDateTime(ctx context.Context, in *OfflineDateTime, opts ...grpc.CallOption) (*OfflineDateTime, error)
	UpdateOfflineDateTime(ctx context.Context, in *OfflineDateTime, opts ...grpc.CallOption) (*OfflineDateTime, error)
	DeleteOfflineDateTime(ctx context.Context, in *OfflineDateTime, opts ...grpc.CallOption) (*OfflineDateTime, error)
	// SERVER ACTIONS //
	FigureDecay(ctx context.Context, in *FigureInstance, opts ...grpc.CallOption) (*GenericStringResponse, error)
	UserWeeklyReset(ctx context.Context, in *User, opts ...grpc.CallOption) (*GenericStringResponse, error)
}

type routesClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutesClient(cc grpc.ClientConnInterface) RoutesClient {
	return &routesClient{cc}
}

func (c *routesClient) GetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/routes.Routes/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/routes.Routes/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/routes.Routes/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) UpdateUserEmail(ctx context.Context, in *UpdateEmailRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/routes.Routes/UpdateUserEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) ResetUserStreak(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/routes.Routes/ResetUserStreak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) ResetUserWeekComplete(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/routes.Routes/ResetUserWeekComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetDailySnapshot(ctx context.Context, in *DailySnapshot, opts ...grpc.CallOption) (*DailySnapshot, error) {
	out := new(DailySnapshot)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetDailySnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) UpdateDailySnapshot(ctx context.Context, in *DailySnapshot, opts ...grpc.CallOption) (*DailySnapshot, error) {
	out := new(DailySnapshot)
	err := c.cc.Invoke(ctx, "/routes.Routes/UpdateDailySnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) CreateDailySnapshot(ctx context.Context, in *DailySnapshot, opts ...grpc.CallOption) (*DailySnapshot, error) {
	out := new(DailySnapshot)
	err := c.cc.Invoke(ctx, "/routes.Routes/CreateDailySnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) DeleteDailySnapshot(ctx context.Context, in *DailySnapshot, opts ...grpc.CallOption) (*DailySnapshot, error) {
	out := new(DailySnapshot)
	err := c.cc.Invoke(ctx, "/routes.Routes/DeleteDailySnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetDailySnapshots(ctx context.Context, in *DailySnapshot, opts ...grpc.CallOption) (*MultiDailySnapshot, error) {
	out := new(MultiDailySnapshot)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetDailySnapshots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetWorkouts(ctx context.Context, in *User, opts ...grpc.CallOption) (*MultiWorkout, error) {
	out := new(MultiWorkout)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetWorkouts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error) {
	out := new(Workout)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetWorkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) CreateWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error) {
	out := new(Workout)
	err := c.cc.Invoke(ctx, "/routes.Routes/CreateWorkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) UpdateWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error) {
	out := new(Workout)
	err := c.cc.Invoke(ctx, "/routes.Routes/UpdateWorkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) DeleteWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error) {
	out := new(Workout)
	err := c.cc.Invoke(ctx, "/routes.Routes/DeleteWorkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetFigureInstance(ctx context.Context, in *FigureInstance, opts ...grpc.CallOption) (*FigureInstance, error) {
	out := new(FigureInstance)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetFigureInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) UpdateFigureInstance(ctx context.Context, in *FigureInstance, opts ...grpc.CallOption) (*FigureInstance, error) {
	out := new(FigureInstance)
	err := c.cc.Invoke(ctx, "/routes.Routes/UpdateFigureInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) CreateFigureInstance(ctx context.Context, in *FigureInstance, opts ...grpc.CallOption) (*FigureInstance, error) {
	out := new(FigureInstance)
	err := c.cc.Invoke(ctx, "/routes.Routes/CreateFigureInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) DeleteFigureInstance(ctx context.Context, in *FigureInstance, opts ...grpc.CallOption) (*FigureInstance, error) {
	out := new(FigureInstance)
	err := c.cc.Invoke(ctx, "/routes.Routes/DeleteFigureInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetFigureInstances(ctx context.Context, in *User, opts ...grpc.CallOption) (*MultiFigureInstance, error) {
	out := new(MultiFigureInstance)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetFigureInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetFigure(ctx context.Context, in *Figure, opts ...grpc.CallOption) (*Figure, error) {
	out := new(Figure)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetFigure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) UpdateFigure(ctx context.Context, in *Figure, opts ...grpc.CallOption) (*Figure, error) {
	out := new(Figure)
	err := c.cc.Invoke(ctx, "/routes.Routes/UpdateFigure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) CreateFigure(ctx context.Context, in *Figure, opts ...grpc.CallOption) (*Figure, error) {
	out := new(Figure)
	err := c.cc.Invoke(ctx, "/routes.Routes/CreateFigure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) DeleteFigure(ctx context.Context, in *Figure, opts ...grpc.CallOption) (*Figure, error) {
	out := new(Figure)
	err := c.cc.Invoke(ctx, "/routes.Routes/DeleteFigure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetFigures(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MultiFigure, error) {
	out := new(MultiFigure)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetFigures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetSkinInstance(ctx context.Context, in *SkinInstance, opts ...grpc.CallOption) (*SkinInstance, error) {
	out := new(SkinInstance)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetSkinInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) UpdateSkinInstance(ctx context.Context, in *SkinInstance, opts ...grpc.CallOption) (*SkinInstance, error) {
	out := new(SkinInstance)
	err := c.cc.Invoke(ctx, "/routes.Routes/UpdateSkinInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) CreateSkinInstance(ctx context.Context, in *SkinInstance, opts ...grpc.CallOption) (*SkinInstance, error) {
	out := new(SkinInstance)
	err := c.cc.Invoke(ctx, "/routes.Routes/CreateSkinInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) DeleteSkinInstance(ctx context.Context, in *SkinInstance, opts ...grpc.CallOption) (*SkinInstance, error) {
	out := new(SkinInstance)
	err := c.cc.Invoke(ctx, "/routes.Routes/DeleteSkinInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetSkinInstances(ctx context.Context, in *User, opts ...grpc.CallOption) (*MultiSkinInstance, error) {
	out := new(MultiSkinInstance)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetSkinInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetSkin(ctx context.Context, in *Skin, opts ...grpc.CallOption) (*Skin, error) {
	out := new(Skin)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetSkin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) UpdateSkin(ctx context.Context, in *Skin, opts ...grpc.CallOption) (*Skin, error) {
	out := new(Skin)
	err := c.cc.Invoke(ctx, "/routes.Routes/UpdateSkin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) CreateSkin(ctx context.Context, in *Skin, opts ...grpc.CallOption) (*Skin, error) {
	out := new(Skin)
	err := c.cc.Invoke(ctx, "/routes.Routes/CreateSkin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) DeleteSkin(ctx context.Context, in *Skin, opts ...grpc.CallOption) (*Skin, error) {
	out := new(Skin)
	err := c.cc.Invoke(ctx, "/routes.Routes/DeleteSkin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetSkins(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MultiSkin, error) {
	out := new(MultiSkin)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetSkins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetSurveyResponse(ctx context.Context, in *SurveyResponse, opts ...grpc.CallOption) (*SurveyResponse, error) {
	out := new(SurveyResponse)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetSurveyResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) UpdateSurveyResponse(ctx context.Context, in *SurveyResponse, opts ...grpc.CallOption) (*SurveyResponse, error) {
	out := new(SurveyResponse)
	err := c.cc.Invoke(ctx, "/routes.Routes/UpdateSurveyResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) CreateSurveyResponse(ctx context.Context, in *SurveyResponse, opts ...grpc.CallOption) (*SurveyResponse, error) {
	out := new(SurveyResponse)
	err := c.cc.Invoke(ctx, "/routes.Routes/CreateSurveyResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) DeleteSurveyResponse(ctx context.Context, in *SurveyResponse, opts ...grpc.CallOption) (*SurveyResponse, error) {
	out := new(SurveyResponse)
	err := c.cc.Invoke(ctx, "/routes.Routes/DeleteSurveyResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetSurveyResponses(ctx context.Context, in *User, opts ...grpc.CallOption) (*MultiSurveyResponse, error) {
	out := new(MultiSurveyResponse)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetSurveyResponses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) CreateSurveyResponseMulti(ctx context.Context, in *MultiSurveyResponse, opts ...grpc.CallOption) (*MultiSurveyResponse, error) {
	out := new(MultiSurveyResponse)
	err := c.cc.Invoke(ctx, "/routes.Routes/CreateSurveyResponseMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetOfflineDateTime(ctx context.Context, in *OfflineDateTime, opts ...grpc.CallOption) (*OfflineDateTime, error) {
	out := new(OfflineDateTime)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetOfflineDateTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) UpdateOfflineDateTime(ctx context.Context, in *OfflineDateTime, opts ...grpc.CallOption) (*OfflineDateTime, error) {
	out := new(OfflineDateTime)
	err := c.cc.Invoke(ctx, "/routes.Routes/UpdateOfflineDateTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) DeleteOfflineDateTime(ctx context.Context, in *OfflineDateTime, opts ...grpc.CallOption) (*OfflineDateTime, error) {
	out := new(OfflineDateTime)
	err := c.cc.Invoke(ctx, "/routes.Routes/DeleteOfflineDateTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) FigureDecay(ctx context.Context, in *FigureInstance, opts ...grpc.CallOption) (*GenericStringResponse, error) {
	out := new(GenericStringResponse)
	err := c.cc.Invoke(ctx, "/routes.Routes/FigureDecay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) UserWeeklyReset(ctx context.Context, in *User, opts ...grpc.CallOption) (*GenericStringResponse, error) {
	out := new(GenericStringResponse)
	err := c.cc.Invoke(ctx, "/routes.Routes/UserWeeklyReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutesServer is the server API for Routes service.
// All implementations must embed UnimplementedRoutesServer
// for forward compatibility
type RoutesServer interface {
	// USER ROUTES //
	GetUser(context.Context, *User) (*User, error)
	CreateUser(context.Context, *User) (*User, error)
	UpdateUser(context.Context, *User) (*User, error)
	DeleteUser(context.Context, *User) (*User, error)
	UpdateUserEmail(context.Context, *UpdateEmailRequest) (*User, error)
	ResetUserStreak(context.Context, *User) (*User, error)
	ResetUserWeekComplete(context.Context, *User) (*User, error)
	// DAILY SNAPSHOT ROUTES //
	GetDailySnapshot(context.Context, *DailySnapshot) (*DailySnapshot, error)
	UpdateDailySnapshot(context.Context, *DailySnapshot) (*DailySnapshot, error)
	CreateDailySnapshot(context.Context, *DailySnapshot) (*DailySnapshot, error)
	DeleteDailySnapshot(context.Context, *DailySnapshot) (*DailySnapshot, error)
	GetDailySnapshots(context.Context, *DailySnapshot) (*MultiDailySnapshot, error)
	// WORKOUT ROUTES //
	GetWorkouts(context.Context, *User) (*MultiWorkout, error)
	GetWorkout(context.Context, *Workout) (*Workout, error)
	CreateWorkout(context.Context, *Workout) (*Workout, error)
	UpdateWorkout(context.Context, *Workout) (*Workout, error)
	DeleteWorkout(context.Context, *Workout) (*Workout, error)
	// FIGURE INSTANCE ROUTES //
	GetFigureInstance(context.Context, *FigureInstance) (*FigureInstance, error)
	UpdateFigureInstance(context.Context, *FigureInstance) (*FigureInstance, error)
	CreateFigureInstance(context.Context, *FigureInstance) (*FigureInstance, error)
	DeleteFigureInstance(context.Context, *FigureInstance) (*FigureInstance, error)
	GetFigureInstances(context.Context, *User) (*MultiFigureInstance, error)
	// FIGURE ROUTES //
	GetFigure(context.Context, *Figure) (*Figure, error)
	UpdateFigure(context.Context, *Figure) (*Figure, error)
	CreateFigure(context.Context, *Figure) (*Figure, error)
	DeleteFigure(context.Context, *Figure) (*Figure, error)
	GetFigures(context.Context, *emptypb.Empty) (*MultiFigure, error)
	// SKIN INSTANCE ROUTES //
	GetSkinInstance(context.Context, *SkinInstance) (*SkinInstance, error)
	UpdateSkinInstance(context.Context, *SkinInstance) (*SkinInstance, error)
	CreateSkinInstance(context.Context, *SkinInstance) (*SkinInstance, error)
	DeleteSkinInstance(context.Context, *SkinInstance) (*SkinInstance, error)
	GetSkinInstances(context.Context, *User) (*MultiSkinInstance, error)
	// SKIN ROUTES //
	GetSkin(context.Context, *Skin) (*Skin, error)
	UpdateSkin(context.Context, *Skin) (*Skin, error)
	CreateSkin(context.Context, *Skin) (*Skin, error)
	DeleteSkin(context.Context, *Skin) (*Skin, error)
	GetSkins(context.Context, *emptypb.Empty) (*MultiSkin, error)
	// SURVEY ROUTES //
	GetSurveyResponse(context.Context, *SurveyResponse) (*SurveyResponse, error)
	UpdateSurveyResponse(context.Context, *SurveyResponse) (*SurveyResponse, error)
	CreateSurveyResponse(context.Context, *SurveyResponse) (*SurveyResponse, error)
	DeleteSurveyResponse(context.Context, *SurveyResponse) (*SurveyResponse, error)
	GetSurveyResponses(context.Context, *User) (*MultiSurveyResponse, error)
	CreateSurveyResponseMulti(context.Context, *MultiSurveyResponse) (*MultiSurveyResponse, error)
	// GENERATION ROUTES //
	GetOfflineDateTime(context.Context, *OfflineDateTime) (*OfflineDateTime, error)
	UpdateOfflineDateTime(context.Context, *OfflineDateTime) (*OfflineDateTime, error)
	DeleteOfflineDateTime(context.Context, *OfflineDateTime) (*OfflineDateTime, error)
	// SERVER ACTIONS //
	FigureDecay(context.Context, *FigureInstance) (*GenericStringResponse, error)
	UserWeeklyReset(context.Context, *User) (*GenericStringResponse, error)
	mustEmbedUnimplementedRoutesServer()
}

// UnimplementedRoutesServer must be embedded to have forward compatible implementations.
type UnimplementedRoutesServer struct {
}

func (UnimplementedRoutesServer) GetUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedRoutesServer) CreateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedRoutesServer) UpdateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedRoutesServer) DeleteUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedRoutesServer) UpdateUserEmail(context.Context, *UpdateEmailRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserEmail not implemented")
}
func (UnimplementedRoutesServer) ResetUserStreak(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserStreak not implemented")
}
func (UnimplementedRoutesServer) ResetUserWeekComplete(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserWeekComplete not implemented")
}
func (UnimplementedRoutesServer) GetDailySnapshot(context.Context, *DailySnapshot) (*DailySnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailySnapshot not implemented")
}
func (UnimplementedRoutesServer) UpdateDailySnapshot(context.Context, *DailySnapshot) (*DailySnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDailySnapshot not implemented")
}
func (UnimplementedRoutesServer) CreateDailySnapshot(context.Context, *DailySnapshot) (*DailySnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDailySnapshot not implemented")
}
func (UnimplementedRoutesServer) DeleteDailySnapshot(context.Context, *DailySnapshot) (*DailySnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDailySnapshot not implemented")
}
func (UnimplementedRoutesServer) GetDailySnapshots(context.Context, *DailySnapshot) (*MultiDailySnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailySnapshots not implemented")
}
func (UnimplementedRoutesServer) GetWorkouts(context.Context, *User) (*MultiWorkout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkouts not implemented")
}
func (UnimplementedRoutesServer) GetWorkout(context.Context, *Workout) (*Workout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkout not implemented")
}
func (UnimplementedRoutesServer) CreateWorkout(context.Context, *Workout) (*Workout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkout not implemented")
}
func (UnimplementedRoutesServer) UpdateWorkout(context.Context, *Workout) (*Workout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkout not implemented")
}
func (UnimplementedRoutesServer) DeleteWorkout(context.Context, *Workout) (*Workout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkout not implemented")
}
func (UnimplementedRoutesServer) GetFigureInstance(context.Context, *FigureInstance) (*FigureInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFigureInstance not implemented")
}
func (UnimplementedRoutesServer) UpdateFigureInstance(context.Context, *FigureInstance) (*FigureInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFigureInstance not implemented")
}
func (UnimplementedRoutesServer) CreateFigureInstance(context.Context, *FigureInstance) (*FigureInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFigureInstance not implemented")
}
func (UnimplementedRoutesServer) DeleteFigureInstance(context.Context, *FigureInstance) (*FigureInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFigureInstance not implemented")
}
func (UnimplementedRoutesServer) GetFigureInstances(context.Context, *User) (*MultiFigureInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFigureInstances not implemented")
}
func (UnimplementedRoutesServer) GetFigure(context.Context, *Figure) (*Figure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFigure not implemented")
}
func (UnimplementedRoutesServer) UpdateFigure(context.Context, *Figure) (*Figure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFigure not implemented")
}
func (UnimplementedRoutesServer) CreateFigure(context.Context, *Figure) (*Figure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFigure not implemented")
}
func (UnimplementedRoutesServer) DeleteFigure(context.Context, *Figure) (*Figure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFigure not implemented")
}
func (UnimplementedRoutesServer) GetFigures(context.Context, *emptypb.Empty) (*MultiFigure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFigures not implemented")
}
func (UnimplementedRoutesServer) GetSkinInstance(context.Context, *SkinInstance) (*SkinInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkinInstance not implemented")
}
func (UnimplementedRoutesServer) UpdateSkinInstance(context.Context, *SkinInstance) (*SkinInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSkinInstance not implemented")
}
func (UnimplementedRoutesServer) CreateSkinInstance(context.Context, *SkinInstance) (*SkinInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSkinInstance not implemented")
}
func (UnimplementedRoutesServer) DeleteSkinInstance(context.Context, *SkinInstance) (*SkinInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSkinInstance not implemented")
}
func (UnimplementedRoutesServer) GetSkinInstances(context.Context, *User) (*MultiSkinInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkinInstances not implemented")
}
func (UnimplementedRoutesServer) GetSkin(context.Context, *Skin) (*Skin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkin not implemented")
}
func (UnimplementedRoutesServer) UpdateSkin(context.Context, *Skin) (*Skin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSkin not implemented")
}
func (UnimplementedRoutesServer) CreateSkin(context.Context, *Skin) (*Skin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSkin not implemented")
}
func (UnimplementedRoutesServer) DeleteSkin(context.Context, *Skin) (*Skin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSkin not implemented")
}
func (UnimplementedRoutesServer) GetSkins(context.Context, *emptypb.Empty) (*MultiSkin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSkins not implemented")
}
func (UnimplementedRoutesServer) GetSurveyResponse(context.Context, *SurveyResponse) (*SurveyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyResponse not implemented")
}
func (UnimplementedRoutesServer) UpdateSurveyResponse(context.Context, *SurveyResponse) (*SurveyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSurveyResponse not implemented")
}
func (UnimplementedRoutesServer) CreateSurveyResponse(context.Context, *SurveyResponse) (*SurveyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurveyResponse not implemented")
}
func (UnimplementedRoutesServer) DeleteSurveyResponse(context.Context, *SurveyResponse) (*SurveyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSurveyResponse not implemented")
}
func (UnimplementedRoutesServer) GetSurveyResponses(context.Context, *User) (*MultiSurveyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSurveyResponses not implemented")
}
func (UnimplementedRoutesServer) CreateSurveyResponseMulti(context.Context, *MultiSurveyResponse) (*MultiSurveyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSurveyResponseMulti not implemented")
}
func (UnimplementedRoutesServer) GetOfflineDateTime(context.Context, *OfflineDateTime) (*OfflineDateTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOfflineDateTime not implemented")
}
func (UnimplementedRoutesServer) UpdateOfflineDateTime(context.Context, *OfflineDateTime) (*OfflineDateTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOfflineDateTime not implemented")
}
func (UnimplementedRoutesServer) DeleteOfflineDateTime(context.Context, *OfflineDateTime) (*OfflineDateTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOfflineDateTime not implemented")
}
func (UnimplementedRoutesServer) FigureDecay(context.Context, *FigureInstance) (*GenericStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FigureDecay not implemented")
}
func (UnimplementedRoutesServer) UserWeeklyReset(context.Context, *User) (*GenericStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserWeeklyReset not implemented")
}
func (UnimplementedRoutesServer) mustEmbedUnimplementedRoutesServer() {}

// UnsafeRoutesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutesServer will
// result in compilation errors.
type UnsafeRoutesServer interface {
	mustEmbedUnimplementedRoutesServer()
}

func RegisterRoutesServer(s grpc.ServiceRegistrar, srv RoutesServer) {
	s.RegisterService(&Routes_ServiceDesc, srv)
}

func _Routes_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).DeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_UpdateUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UpdateUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/UpdateUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UpdateUserEmail(ctx, req.(*UpdateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_ResetUserStreak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).ResetUserStreak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/ResetUserStreak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).ResetUserStreak(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_ResetUserWeekComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).ResetUserWeekComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/ResetUserWeekComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).ResetUserWeekComplete(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetDailySnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailySnapshot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetDailySnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetDailySnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetDailySnapshot(ctx, req.(*DailySnapshot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_UpdateDailySnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailySnapshot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UpdateDailySnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/UpdateDailySnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UpdateDailySnapshot(ctx, req.(*DailySnapshot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_CreateDailySnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailySnapshot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).CreateDailySnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/CreateDailySnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).CreateDailySnapshot(ctx, req.(*DailySnapshot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_DeleteDailySnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailySnapshot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).DeleteDailySnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/DeleteDailySnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).DeleteDailySnapshot(ctx, req.(*DailySnapshot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetDailySnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailySnapshot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetDailySnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetDailySnapshots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetDailySnapshots(ctx, req.(*DailySnapshot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetWorkouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetWorkouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetWorkouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetWorkouts(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetWorkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetWorkout(ctx, req.(*Workout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_CreateWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).CreateWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/CreateWorkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).CreateWorkout(ctx, req.(*Workout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_UpdateWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UpdateWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/UpdateWorkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UpdateWorkout(ctx, req.(*Workout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_DeleteWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).DeleteWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/DeleteWorkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).DeleteWorkout(ctx, req.(*Workout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetFigureInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FigureInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetFigureInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetFigureInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetFigureInstance(ctx, req.(*FigureInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_UpdateFigureInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FigureInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UpdateFigureInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/UpdateFigureInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UpdateFigureInstance(ctx, req.(*FigureInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_CreateFigureInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FigureInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).CreateFigureInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/CreateFigureInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).CreateFigureInstance(ctx, req.(*FigureInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_DeleteFigureInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FigureInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).DeleteFigureInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/DeleteFigureInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).DeleteFigureInstance(ctx, req.(*FigureInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetFigureInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetFigureInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetFigureInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetFigureInstances(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetFigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Figure)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetFigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetFigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetFigure(ctx, req.(*Figure))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_UpdateFigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Figure)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UpdateFigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/UpdateFigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UpdateFigure(ctx, req.(*Figure))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_CreateFigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Figure)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).CreateFigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/CreateFigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).CreateFigure(ctx, req.(*Figure))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_DeleteFigure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Figure)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).DeleteFigure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/DeleteFigure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).DeleteFigure(ctx, req.(*Figure))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetFigures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetFigures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetFigures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetFigures(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetSkinInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkinInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetSkinInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetSkinInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetSkinInstance(ctx, req.(*SkinInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_UpdateSkinInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkinInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UpdateSkinInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/UpdateSkinInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UpdateSkinInstance(ctx, req.(*SkinInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_CreateSkinInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkinInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).CreateSkinInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/CreateSkinInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).CreateSkinInstance(ctx, req.(*SkinInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_DeleteSkinInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SkinInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).DeleteSkinInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/DeleteSkinInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).DeleteSkinInstance(ctx, req.(*SkinInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetSkinInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetSkinInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetSkinInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetSkinInstances(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetSkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Skin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetSkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetSkin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetSkin(ctx, req.(*Skin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_UpdateSkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Skin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UpdateSkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/UpdateSkin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UpdateSkin(ctx, req.(*Skin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_CreateSkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Skin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).CreateSkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/CreateSkin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).CreateSkin(ctx, req.(*Skin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_DeleteSkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Skin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).DeleteSkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/DeleteSkin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).DeleteSkin(ctx, req.(*Skin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetSkins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetSkins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetSkins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetSkins(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetSurveyResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetSurveyResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetSurveyResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetSurveyResponse(ctx, req.(*SurveyResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_UpdateSurveyResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UpdateSurveyResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/UpdateSurveyResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UpdateSurveyResponse(ctx, req.(*SurveyResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_CreateSurveyResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).CreateSurveyResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/CreateSurveyResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).CreateSurveyResponse(ctx, req.(*SurveyResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_DeleteSurveyResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SurveyResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).DeleteSurveyResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/DeleteSurveyResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).DeleteSurveyResponse(ctx, req.(*SurveyResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetSurveyResponses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetSurveyResponses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetSurveyResponses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetSurveyResponses(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_CreateSurveyResponseMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiSurveyResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).CreateSurveyResponseMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/CreateSurveyResponseMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).CreateSurveyResponseMulti(ctx, req.(*MultiSurveyResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetOfflineDateTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineDateTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetOfflineDateTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetOfflineDateTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetOfflineDateTime(ctx, req.(*OfflineDateTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_UpdateOfflineDateTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineDateTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UpdateOfflineDateTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/UpdateOfflineDateTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UpdateOfflineDateTime(ctx, req.(*OfflineDateTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_DeleteOfflineDateTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfflineDateTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).DeleteOfflineDateTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/DeleteOfflineDateTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).DeleteOfflineDateTime(ctx, req.(*OfflineDateTime))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_FigureDecay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FigureInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).FigureDecay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/FigureDecay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).FigureDecay(ctx, req.(*FigureInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_UserWeeklyReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UserWeeklyReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/UserWeeklyReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UserWeeklyReset(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// Routes_ServiceDesc is the grpc.ServiceDesc for Routes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Routes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routes.Routes",
	HandlerType: (*RoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _Routes_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Routes_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Routes_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Routes_DeleteUser_Handler,
		},
		{
			MethodName: "UpdateUserEmail",
			Handler:    _Routes_UpdateUserEmail_Handler,
		},
		{
			MethodName: "ResetUserStreak",
			Handler:    _Routes_ResetUserStreak_Handler,
		},
		{
			MethodName: "ResetUserWeekComplete",
			Handler:    _Routes_ResetUserWeekComplete_Handler,
		},
		{
			MethodName: "GetDailySnapshot",
			Handler:    _Routes_GetDailySnapshot_Handler,
		},
		{
			MethodName: "UpdateDailySnapshot",
			Handler:    _Routes_UpdateDailySnapshot_Handler,
		},
		{
			MethodName: "CreateDailySnapshot",
			Handler:    _Routes_CreateDailySnapshot_Handler,
		},
		{
			MethodName: "DeleteDailySnapshot",
			Handler:    _Routes_DeleteDailySnapshot_Handler,
		},
		{
			MethodName: "GetDailySnapshots",
			Handler:    _Routes_GetDailySnapshots_Handler,
		},
		{
			MethodName: "GetWorkouts",
			Handler:    _Routes_GetWorkouts_Handler,
		},
		{
			MethodName: "GetWorkout",
			Handler:    _Routes_GetWorkout_Handler,
		},
		{
			MethodName: "CreateWorkout",
			Handler:    _Routes_CreateWorkout_Handler,
		},
		{
			MethodName: "UpdateWorkout",
			Handler:    _Routes_UpdateWorkout_Handler,
		},
		{
			MethodName: "DeleteWorkout",
			Handler:    _Routes_DeleteWorkout_Handler,
		},
		{
			MethodName: "GetFigureInstance",
			Handler:    _Routes_GetFigureInstance_Handler,
		},
		{
			MethodName: "UpdateFigureInstance",
			Handler:    _Routes_UpdateFigureInstance_Handler,
		},
		{
			MethodName: "CreateFigureInstance",
			Handler:    _Routes_CreateFigureInstance_Handler,
		},
		{
			MethodName: "DeleteFigureInstance",
			Handler:    _Routes_DeleteFigureInstance_Handler,
		},
		{
			MethodName: "GetFigureInstances",
			Handler:    _Routes_GetFigureInstances_Handler,
		},
		{
			MethodName: "GetFigure",
			Handler:    _Routes_GetFigure_Handler,
		},
		{
			MethodName: "UpdateFigure",
			Handler:    _Routes_UpdateFigure_Handler,
		},
		{
			MethodName: "CreateFigure",
			Handler:    _Routes_CreateFigure_Handler,
		},
		{
			MethodName: "DeleteFigure",
			Handler:    _Routes_DeleteFigure_Handler,
		},
		{
			MethodName: "GetFigures",
			Handler:    _Routes_GetFigures_Handler,
		},
		{
			MethodName: "GetSkinInstance",
			Handler:    _Routes_GetSkinInstance_Handler,
		},
		{
			MethodName: "UpdateSkinInstance",
			Handler:    _Routes_UpdateSkinInstance_Handler,
		},
		{
			MethodName: "CreateSkinInstance",
			Handler:    _Routes_CreateSkinInstance_Handler,
		},
		{
			MethodName: "DeleteSkinInstance",
			Handler:    _Routes_DeleteSkinInstance_Handler,
		},
		{
			MethodName: "GetSkinInstances",
			Handler:    _Routes_GetSkinInstances_Handler,
		},
		{
			MethodName: "GetSkin",
			Handler:    _Routes_GetSkin_Handler,
		},
		{
			MethodName: "UpdateSkin",
			Handler:    _Routes_UpdateSkin_Handler,
		},
		{
			MethodName: "CreateSkin",
			Handler:    _Routes_CreateSkin_Handler,
		},
		{
			MethodName: "DeleteSkin",
			Handler:    _Routes_DeleteSkin_Handler,
		},
		{
			MethodName: "GetSkins",
			Handler:    _Routes_GetSkins_Handler,
		},
		{
			MethodName: "GetSurveyResponse",
			Handler:    _Routes_GetSurveyResponse_Handler,
		},
		{
			MethodName: "UpdateSurveyResponse",
			Handler:    _Routes_UpdateSurveyResponse_Handler,
		},
		{
			MethodName: "CreateSurveyResponse",
			Handler:    _Routes_CreateSurveyResponse_Handler,
		},
		{
			MethodName: "DeleteSurveyResponse",
			Handler:    _Routes_DeleteSurveyResponse_Handler,
		},
		{
			MethodName: "GetSurveyResponses",
			Handler:    _Routes_GetSurveyResponses_Handler,
		},
		{
			MethodName: "CreateSurveyResponseMulti",
			Handler:    _Routes_CreateSurveyResponseMulti_Handler,
		},
		{
			MethodName: "GetOfflineDateTime",
			Handler:    _Routes_GetOfflineDateTime_Handler,
		},
		{
			MethodName: "UpdateOfflineDateTime",
			Handler:    _Routes_UpdateOfflineDateTime_Handler,
		},
		{
			MethodName: "DeleteOfflineDateTime",
			Handler:    _Routes_DeleteOfflineDateTime_Handler,
		},
		{
			MethodName: "FigureDecay",
			Handler:    _Routes_FigureDecay_Handler,
		},
		{
			MethodName: "UserWeeklyReset",
			Handler:    _Routes_UserWeeklyReset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routes.proto",
}
