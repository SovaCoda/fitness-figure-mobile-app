// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: routes.proto

package routes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoutesClient is the client API for Routes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutesClient interface {
	// USER ROUTES //
	GetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	// WORKOUT ROUTES //
	GetWorkouts(ctx context.Context, in *User, opts ...grpc.CallOption) (*MultiWorkout, error)
	GetWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error)
	CreateWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error)
	UpdateWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error)
	DeleteWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error)
}

type routesClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutesClient(cc grpc.ClientConnInterface) RoutesClient {
	return &routesClient{cc}
}

func (c *routesClient) GetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/routes.Routes/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/routes.Routes/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/routes.Routes/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetWorkouts(ctx context.Context, in *User, opts ...grpc.CallOption) (*MultiWorkout, error) {
	out := new(MultiWorkout)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetWorkouts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) GetWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error) {
	out := new(Workout)
	err := c.cc.Invoke(ctx, "/routes.Routes/GetWorkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) CreateWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error) {
	out := new(Workout)
	err := c.cc.Invoke(ctx, "/routes.Routes/CreateWorkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) UpdateWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error) {
	out := new(Workout)
	err := c.cc.Invoke(ctx, "/routes.Routes/UpdateWorkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routesClient) DeleteWorkout(ctx context.Context, in *Workout, opts ...grpc.CallOption) (*Workout, error) {
	out := new(Workout)
	err := c.cc.Invoke(ctx, "/routes.Routes/DeleteWorkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutesServer is the server API for Routes service.
// All implementations must embed UnimplementedRoutesServer
// for forward compatibility
type RoutesServer interface {
	// USER ROUTES //
	GetUser(context.Context, *User) (*User, error)
	CreateUser(context.Context, *User) (*User, error)
	UpdateUser(context.Context, *User) (*User, error)
	DeleteUser(context.Context, *User) (*User, error)
	// WORKOUT ROUTES //
	GetWorkouts(context.Context, *User) (*MultiWorkout, error)
	GetWorkout(context.Context, *Workout) (*Workout, error)
	CreateWorkout(context.Context, *Workout) (*Workout, error)
	UpdateWorkout(context.Context, *Workout) (*Workout, error)
	DeleteWorkout(context.Context, *Workout) (*Workout, error)
	mustEmbedUnimplementedRoutesServer()
}

// UnimplementedRoutesServer must be embedded to have forward compatible implementations.
type UnimplementedRoutesServer struct {
}

func (UnimplementedRoutesServer) GetUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedRoutesServer) CreateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedRoutesServer) UpdateUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedRoutesServer) DeleteUser(context.Context, *User) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedRoutesServer) GetWorkouts(context.Context, *User) (*MultiWorkout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkouts not implemented")
}
func (UnimplementedRoutesServer) GetWorkout(context.Context, *Workout) (*Workout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkout not implemented")
}
func (UnimplementedRoutesServer) CreateWorkout(context.Context, *Workout) (*Workout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkout not implemented")
}
func (UnimplementedRoutesServer) UpdateWorkout(context.Context, *Workout) (*Workout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkout not implemented")
}
func (UnimplementedRoutesServer) DeleteWorkout(context.Context, *Workout) (*Workout, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkout not implemented")
}
func (UnimplementedRoutesServer) mustEmbedUnimplementedRoutesServer() {}

// UnsafeRoutesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutesServer will
// result in compilation errors.
type UnsafeRoutesServer interface {
	mustEmbedUnimplementedRoutesServer()
}

func RegisterRoutesServer(s grpc.ServiceRegistrar, srv RoutesServer) {
	s.RegisterService(&Routes_ServiceDesc, srv)
}

func _Routes_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).DeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetWorkouts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetWorkouts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetWorkouts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetWorkouts(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_GetWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).GetWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/GetWorkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).GetWorkout(ctx, req.(*Workout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_CreateWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).CreateWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/CreateWorkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).CreateWorkout(ctx, req.(*Workout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_UpdateWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).UpdateWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/UpdateWorkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).UpdateWorkout(ctx, req.(*Workout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routes_DeleteWorkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Workout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutesServer).DeleteWorkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/routes.Routes/DeleteWorkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutesServer).DeleteWorkout(ctx, req.(*Workout))
	}
	return interceptor(ctx, in, info, handler)
}

// Routes_ServiceDesc is the grpc.ServiceDesc for Routes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Routes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routes.Routes",
	HandlerType: (*RoutesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _Routes_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Routes_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Routes_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _Routes_DeleteUser_Handler,
		},
		{
			MethodName: "GetWorkouts",
			Handler:    _Routes_GetWorkouts_Handler,
		},
		{
			MethodName: "GetWorkout",
			Handler:    _Routes_GetWorkout_Handler,
		},
		{
			MethodName: "CreateWorkout",
			Handler:    _Routes_CreateWorkout_Handler,
		},
		{
			MethodName: "UpdateWorkout",
			Handler:    _Routes_UpdateWorkout_Handler,
		},
		{
			MethodName: "DeleteWorkout",
			Handler:    _Routes_DeleteWorkout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routes.proto",
}
