syntax = "proto3";

option go_package = "./routes";
import "google/protobuf/empty.proto";

package routes;

service Routes {
    // USER ROUTES //
    rpc GetUser(User) returns (User) {}
    rpc CreateUser(User) returns (User) {}
    rpc UpdateUser(User) returns (User) {}
    rpc DeleteUser(User) returns (User) {}
    rpc UpdateUserEmail(UpdateEmailRequest) returns (User) {}
    rpc ResetUserStreak(User) returns (User) {}
    rpc ResetUserWeekComplete(User) returns (User) {}

    // DAILY SNAPSHOT ROUTES //
    rpc GetDailySnapshot(DailySnapshot) returns (DailySnapshot) {}
    rpc UpdateDailySnapshot(DailySnapshot) returns (DailySnapshot) {}
    rpc CreateDailySnapshot(DailySnapshot) returns (DailySnapshot) {}
    rpc DeleteDailySnapshot(DailySnapshot) returns (DailySnapshot) {}
    rpc GetDailySnapshots(DailySnapshot) returns (MultiDailySnapshot) {}

    // WORKOUT ROUTES //
    rpc GetWorkouts(User) returns (MultiWorkout) {}
    rpc GetWorkout(Workout) returns (Workout) {}
    rpc CreateWorkout(Workout) returns (Workout) {}
    rpc UpdateWorkout(Workout) returns (Workout) {}
    rpc DeleteWorkout(Workout) returns (Workout) {}

    // FIGURE INSTANCE ROUTES //
    rpc GetFigureInstance(FigureInstance) returns (FigureInstance) {}
    rpc UpdateFigureInstance(FigureInstance) returns (FigureInstance) {}
    rpc CreateFigureInstance(FigureInstance) returns (FigureInstance) {}
    rpc DeleteFigureInstance(FigureInstance) returns (FigureInstance) {}
    rpc GetFigureInstances(User) returns (MultiFigureInstance) {}

    // FIGURE ROUTES //
    rpc GetFigure(Figure) returns (Figure) {}
    rpc UpdateFigure(Figure) returns (Figure) {}
    rpc CreateFigure(Figure) returns (Figure) {}
    rpc DeleteFigure(Figure) returns (Figure) {}
    rpc GetFigures(google.protobuf.Empty) returns (MultiFigure) {}

    // SKIN INSTANCE ROUTES //
    rpc GetSkinInstance(SkinInstance) returns (SkinInstance) {}
    rpc UpdateSkinInstance(SkinInstance) returns (SkinInstance) {}
    rpc CreateSkinInstance(SkinInstance) returns (SkinInstance) {}
    rpc DeleteSkinInstance(SkinInstance) returns (SkinInstance) {}
    rpc GetSkinInstances(User) returns (MultiSkinInstance) {}

    // SKIN ROUTES //
    rpc GetSkin(Skin) returns (Skin) {}
    rpc UpdateSkin(Skin) returns (Skin) {}
    rpc CreateSkin(Skin) returns (Skin) {}
    rpc DeleteSkin(Skin) returns (Skin) {}
    rpc GetSkins(google.protobuf.Empty) returns (MultiSkin) {}

    // SURVEY ROUTES //
    rpc GetSurveyResponse(SurveyResponse) returns (SurveyResponse) {}
    rpc UpdateSurveyResponse(SurveyResponse) returns (SurveyResponse) {}
    rpc CreateSurveyResponse(SurveyResponse) returns (SurveyResponse) {}
    rpc DeleteSurveyResponse(SurveyResponse) returns (SurveyResponse) {}
    rpc GetSurveyResponses(User) returns (MultiSurveyResponse) {}
    rpc CreateSurveyResponseMulti(MultiSurveyResponse) returns (MultiSurveyResponse) {}

    // GENERATION ROUTES //
    rpc GetOfflineDateTime(OfflineDateTime) returns (OfflineDateTime) {}
    rpc UpdateOfflineDateTime(OfflineDateTime) returns (OfflineDateTime) {}
    rpc DeleteOfflineDateTime(OfflineDateTime) returns (OfflineDateTime) {} 

    // SUBSCRIPTION ROUTES //
    rpc CreateSubscriptionTimeStamp(SubscriptionTimeStamp) returns (SubscriptionTimeStamp) {}
    rpc GetSubscriptionTimeStamp(SubscriptionTimeStamp) returns (SubscriptionTimeStamp) {}
    rpc UpdateSubscriptionTimeStamp(SubscriptionTimeStamp) returns (SubscriptionTimeStamp) {}
    rpc DeleteSubscriptionTimeStamp(SubscriptionTimeStamp) returns (SubscriptionTimeStamp) {}
    
    // SERVER ACTIONS //
    rpc FigureDecay(FigureInstance) returns (GenericStringResponse) {}
    rpc UserWeeklyReset(User) returns (GenericStringResponse) {}

    // FRIEND ACTIONS //
    rpc SendFriendRequest(FriendRequest) returns (Friend) {}
    rpc AcceptFriendRequest(FriendRequest) returns (Friend) {}
    rpc RejectFriendRequest(FriendRequest) returns (Friend) {}
    rpc RemoveFriend(FriendRequest) returns (GenericStringResponse) {}
    rpc GetFriends(FriendListRequest) returns (MultiFriends) {}
    rpc GetPendingRequests(FriendListRequest) returns (MultiFriends) {}
    rpc CheckFriendshipStatus(FriendRequest) returns (Friend) {}

    // LEADERBOARD ACTIONS //
    rpc GetLeaderboard(LeaderboardRequest) returns (LeaderboardResponse) {}
    rpc GetUserStats(User) returns (UserStats) {}
    rpc ResetWeeklyStats(google.protobuf.Empty) returns (GenericStringResponse) {}
}

message GenericStringResponse {
    string message = 1;
}

message Workout {
    string Email = 1;
    string Start_date = 2;
    int64 Elapsed = 3;
    int64 Evo_Add = 4;
    string End_Date = 5;
    int64 Charge_Add = 6;
    int32 Countable = 7;
    string Robot_Name = 8;
    double investment = 9;
}

message MultiWorkout {
    repeated Workout workouts = 1;
}

message User {
    string email = 1;
    string cur_figure = 2;
    string name = 3;
    int64 currency = 4;
    int64 week_complete = 5;
    int64 week_goal = 6;
    string cur_workout = 7;
    int64 workout_min_time = 8;
    string last_login = 9;
    int64 streak = 10;
    int64 premium = 11;
    string ready_for_week_reset = 12;
    string is_in_grace_period = 13;
}

message DailySnapshot {
    string User_Email = 1;
    string Date = 2;
    string Figure_Name = 3;
    int32 Ev_Points = 4;
    int32 Ev_Level = 5;
    int32 Charge = 6;
    int32 User_Streak = 7;
    int32 User_Week_Complete = 8;
    int32 User_Week_Goal = 9;
    int32 User_Workout_Min_Time = 10;
    int32 User_Currency = 11;
}

message MultiDailySnapshot {
    repeated DailySnapshot dailySnapshots = 1;
}

message MultiUser {
    repeated User users = 1;
}

message FigureInstance {
    string Figure_Id = 1;
    string Figure_Name = 2;
    string User_Email = 3;
    string Cur_Skin = 4;
    int32 Ev_Points = 5;
    int32 Charge = 6;
    int32 Mood = 7;
    string Last_Reset = 8;
    int32 Ev_Level = 9;
}

message MultiFigureInstance {
    repeated FigureInstance figureInstances = 1;
}

message Figure {
    string Figure_Name = 1;
    int32 Base_Ev_Gain = 2;
    int32 Base_Currency_Gain = 3;
    int32 Price = 4;
    int32 Stage1_Ev_Cutoff = 5;
    int32 Stage2_Ev_Cutoff = 6;
    int32 Stage3_Ev_Cutoff = 7;
    int32 Stage4_Ev_Cutoff = 8;
    int32 Stage5_Ev_Cutoff = 9;
    int32 Stage6_Ev_Cutoff = 10;
    int32 Stage7_Ev_Cutoff = 11;
    int32 Stage8_Ev_Cutoff = 12;
    int32 Stage9_Ev_Cutoff = 13;
    int32 Stage10_Ev_Cutoff = 14;
}

message MultiFigure {
    repeated Figure figures = 1;
}

message SkinInstance {
    string Skin_Id = 1;
    string Skin_Name = 2;
    string User_Email = 3;
    string Figure_Name = 4;
}

message MultiSkinInstance {
    repeated SkinInstance skinInstances = 1;
}

message Skin {
    string Skin_Name = 1;
    string Figure_Name = 2;
    int32 Price = 3;
}

message MultiSkin {
    repeated Skin skins = 1;
}

message SurveyResponse {
    string Email = 1;
    string Question = 2;
    string Answer = 3;
    string Date = 4; 
}

message MultiSurveyResponse {
    repeated SurveyResponse surveyResponses = 1;
}

message OfflineDateTime { 
    string Email = 1;
    string Currency = 2;
}

message SubscriptionTimeStamp {
    string Email = 1;
    string SubscribedOn = 2;
    string ExpiresOn = 3;
    string Transaction_Id = 4;
}

message UpdateEmailRequest {
    string old_email = 1;
    string new_email = 2;
}

message FriendRequest {
    string user_email = 1;
    string friend_email = 2;
}

message Friend {
    string user_email = 1;
    string friend_email = 2;
    string status = 3; // "pending", "accepted", "blocked"
    string created_at = 4;
    string updated_at = 5;
}

message MultiFriends {
    repeated Friend friends = 1;
    int32 total_count = 2;
}

message FriendListRequest {
    string user_email = 1;
    string status = 2;
    int32 page = 3;
    int32 page_size = 4;
}

// maybe useful for showing the user's stats
message UserStats {
    string user_email = 1;
    int64 weekly_points = 2;
    int64 total_points = 3;
    string last_weekly_reset = 4;
}

message LeaderboardResponse {
    repeated LeaderboardEntry entries = 1;
    int32 user_rank = 2; // used for requesting the user's rank
    int64 total_users = 3; // Total number of users in this leaderboard
    int64 user_points = 4;
}

message LeaderboardEntry {
    string user_email = 1;
    string name = 2;
    string figure_name = 3;
    int64 weekly_points = 4;
    int64 total_points = 5;
    int32 streak = 6;
    int32 rank = 7;
    bool is_friend = 8;
}

enum LeaderboardType {
    GLOBAL = 0;
    FRIENDS_ONLY = 1;
}

enum LeaderboardTimeFrame {
    WEEKLY = 0;
    ALL_TIME = 1;
}

message LeaderboardRequest {
    string user_email = 1;
    LeaderboardType type = 2;
    LeaderboardTimeFrame time_frame = 3;
    int32 page = 4; 
    int32 page_size = 5; // Used to set limit on how many friends to show up on the leaderboard
}